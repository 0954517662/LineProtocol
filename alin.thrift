enum AccountMigrationCheckType {
	SKIP = 0;
	PINCODE = 1;
	SECURITY_CENTER = 2;
}

enum AccountMigrationPincodeType {
	NOT_APPLICABLE = 0;
	NOT_SET = 1;
	SET = 2;
	NEED_ENFORCED_INPUT = 3;
}

enum ApplicationType {
	IOS = 16;
	IOS_RC = 17;
	IOS_BETA = 18;
	IOS_ALPHA = 19;
	ANDROID = 32;
	ANDROID_RC = 33;
	ANDROID_BETA = 34;
	ANDROID_ALPHA = 35;
	WAP = 48;
	WAP_RC = 49;
	WAP_BETA = 50;
	WAP_ALPHA = 51;
	BOT = 64;
	BOT_RC = 65;
	BOT_BETA = 66;
	BOT_ALPHA = 67;
	WEB = 80;
	WEB_RC = 81;
	WEB_BETA = 82;
	WEB_ALPHA = 83;
	DESKTOPWIN = 96;
	DESKTOPWIN_RC = 97;
	DESKTOPWIN_BETA = 98;
	DESKTOPWIN_ALPHA = 99;
	DESKTOPMAC = 112;
	DESKTOPMAC_RC = 113;
	DESKTOPMAC_BETA = 114;
	DESKTOPMAC_ALPHA = 115;
	CHANNELGW = 128;
	CHANNELGW_RC = 129;
	CHANNELGW_BETA = 130;
	CHANNELGW_ALPHA = 131;
	CHANNELCP = 144;
	CHANNELCP_RC = 145;
	CHANNELCP_BETA = 146;
	CHANNELCP_ALPHA = 147;
	WINPHONE = 160;
	WINPHONE_RC = 161;
	WINPHONE_BETA = 162;
	WINPHONE_ALPHA = 163;
	BLACKBERRY = 176;
	BLACKBERRY_RC = 177;
	BLACKBERRY_BETA = 178;
	BLACKBERRY_ALPHA = 179;
	WINMETRO = 192;
	WINMETRO_RC = 193;
	WINMETRO_BETA = 194;
	WINMETRO_ALPHA = 195;
	S40 = 208;
	S40_RC = 209;
	S40_BETA = 210;
	S40_ALPHA = 211;
	CHRONO = 224;
	CHRONO_RC = 225;
	CHRONO_BETA = 226;
	CHRONO_ALPHA = 227;
	TIZEN = 256;
	TIZEN_RC = 257;
	TIZEN_BETA = 258;
	TIZEN_ALPHA = 259;
	VIRTUAL = 272;
	FIREFOXOS = 288;
	FIREFOXOS_RC = 289;
	FIREFOXOS_BETA = 290;
	FIREFOXOS_ALPHA = 291;
	IOSIPAD = 304;
	IOSIPAD_RC = 305;
	IOSIPAD_BETA = 306;
	IOSIPAD_ALPHA = 307;
	BIZIOS = 320;
	BIZIOS_RC = 321;
	BIZIOS_BETA = 322;
	BIZIOS_ALPHA = 323;
	BIZANDROID = 336;
	BIZANDROID_RC = 337;
	BIZANDROID_BETA = 338;
	BIZANDROID_ALPHA = 339;
	BIZBOT = 352;
	BIZBOT_RC = 353;
	BIZBOT_BETA = 354;
	BIZBOT_ALPHA = 355;
	CHROMEOS = 368;
	CHROMEOS_RC = 369;
	CHROMEOS_BETA = 370;
	CHROMEOS_ALPHA = 371;
	ANDROIDLITE = 384;
	ANDROIDLITE_RC = 385;
	ANDROIDLITE_BETA = 386;
	ANDROIDLITE_ALPHA = 387;
	WIN10 = 400;
	WIN10_RC = 401;
	WIN10_BETA = 402;
	WIN10_ALPHA = 403;
	BIZWEB = 416;
	BIZWEB_RC = 417;
	BIZWEB_BETA = 418;
	BIZWEB_ALPHA = 419;
	DUMMYPRIMARY = 432;
	DUMMYPRIMARY_RC = 433;
	DUMMYPRIMARY_BETA = 434;
	DUMMYPRIMARY_ALPHA = 435;
	SQUARE = 448;
	SQUARE_RC = 449;
	SQUARE_BETA = 450;
	SQUARE_ALPHA = 451;
	INTERNAL = 464;
	INTERNAL_RC = 465;
	INTERNAL_BETA = 466;
	INTERNAL_ALPHA = 467;
	CLOVAFRIENDS = 480;
	CLOVAFRIENDS_RC = 481;
	CLOVAFRIENDS_BETA = 482;
	CLOVAFRIENDS_ALPHA = 483;
}

enum AsymmetricKeyAlgorithm {
	ASYMMETRIC_KEY_ALGORITHM_RSA = 1;
	ASYMMETRIC_KEY_ALGORITHM_ECDH = 2;
}

enum BankInfoType {
	BANK_ALL = 1;
	BANK_DEPOSIT = 2;
	BANK_WITHDRAWAL = 3;
}

enum BarcodeFormat {
	CODE128 = 1;
}

enum BooleanState {
	NONE = 0;
	OFF = 1;
	ON = 2;
}

enum BotErrorCode {
	UNKNOWN = 0;
	INTERNAL_ERROR = 500;
	ILLEGAL_ARGUMENT = 400;
	AUTHENTICATION_FAILED = 401;
	BOT_NOT_FOUND = 1;
	BOT_NOT_AVAILABLE = 2;
	NOT_A_MEMBER = 3;
}

enum BotType {
	RESERVED = 0;
	OFFICIAL = 1;
	LINE_AT_0 = 2;
	LINE_AT = 3;
}

enum BuddyOnAirLabel {
	ON_AIR = 0;
	LIVE = 1;
}

enum BuddyOnAirType {
	NORMAL = 0;
	VIDEOCAM = 1;
	VOIP = 2;
	RECORD = 3;
}

enum BuddyResultState {
	ACCEPTED = 1;
	SUCCEEDED = 2;
	FAILED = 3;
	CANCELLED = 4;
	NOTIFY_FAILED = 5;
	STORING = 11;
	UPLOADING = 21;
	NOTIFYING = 31;
	REMOVING_SUBSCRIPTION = 41;
	UNREGISTERING_ACCOUNT = 42;
	NOTIFYING_LEAVE_CHAT = 43;
}

enum BuddySearchRequestSource {
	NA = 0;
	FRIEND_VIEW = 1;
	OFFICIAL_ACCOUNT_VIEW = 2;
}

enum CardBrand {
	UNKNOWN = 0;
	VISA = 1;
	MASTER = 2;
	AMEX = 3;
	DINERS = 4;
	JCB = 5;
}

enum CarrierCode {
	NOT_SPECIFIED = 0;
	JP_DOCOMO = 1;
	JP_AU = 2;
	JP_SOFTBANK = 3;
	KR_SKT = 17;
	KR_KT = 18;
	KR_LGT = 19;
	JP_DOCOMO_LINE = 4;
}

enum ChannelConfiguration {
	MESSAGE = 0;
	MESSAGE_NOTIFICATION = 1;
	NOTIFICATION_CENTER = 2;
}

enum ChannelErrorCode {
	ILLEGAL_ARGUMENT = 0;
	INTERNAL_ERROR = 1;
	CONNECTION_ERROR = 2;
	AUTHENTICATIONI_FAILED = 3;
	NEED_PERMISSION_APPROVAL = 4;
	COIN_NOT_USABLE = 5;
	WEBVIEW_NOT_ALLOWED = 6;
}

enum ChannelFeatureLicense {
	BLE_LCS_API_USABLE = 26;
	PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27;
	ALLOW_IOS_WEBKIT = 28;
}

enum ChannelPermission {
	PROFILE = 0;
	FRIENDS = 1;
	GROUP = 2;
}

enum ChannelSyncType {
	SYNC = 0;
	REMOVE = 1;
	REMOVE_ALL = 2;
}

enum ChatappAvailableChatTypes {
	PERSONAL = 1;
	ROOM = 2;
	GROUP = 3;
	SQUARE_CHAT = 4;
}

enum ChatappErrorCode {
    INVALID_REQUEST = 1;
    UNAUTHORIZED = 2;
    SERVER_ERROR = 100;
}

enum CompositePaymentItemMethod {
	NULL = 0;
	BALANCE = 1;
	CREDIT_CARD = 2;
	POINT = 3;
	DEBIT_PAYMENT = 4;
}

enum ContactAttribute {
	CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1;
	CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2;
	CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16;
	CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32;
}

enum ContactRelation {
	ONEWAY = 0;
	BOTH = 1;
	NOT_REGISTERED = 2;
}

enum ContactSetting {
	CONTACT_SETTING_NOTIFICATION_DISABLE = 1;
	CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2;
	CONTACT_SETTING_CONTACT_HIDE = 4;
	CONTACT_SETTING_FAVORITE = 8;
	CONTACT_SETTING_DELETE = 16;
}

enum ContactStatus {
	UNSPECIFIED = 0;
	FRIEND = 1;
	FRIEND_BLOCKED = 2;
	RECOMMEND = 3;
	RECOMMEND_BLOCKED = 4;
	DELETED = 5;
	DELETED_BLOCKED = 6;
}

enum ContactType {
	MID = 0;
	PHONE = 1;
	EMAIL = 2;
	USERID = 3;
	PROXIMITY = 4;
	GROUP = 5;
	USER = 6;
	QRCODE = 7;
	PROMOTION_BOT = 8;
	CONTACT_MESSAGE = 9;
	FRIEND_REQUEST = 10;
	REPAIR = 128;
	FACEBOOK = 2305;
	SINA = 2306;
	RENREN = 2307;
	FEIXIN = 2308;
	BBM = 2309;
	BEACON = 11;
}

enum ContentType {
	NONE = 0;
	IMAGE = 1;
	VIDEO = 2;
	AUDIO = 3;
	HTML = 4;
	PDF = 5;
	CALL = 6;
	STICKER = 7;
	PRESENCE = 8;
	GIFT = 9;
	GROUPBOARD = 10;
	APPLINK = 11;
	LINK = 12;
	CONTACT = 13;
	FILE = 14;
	LOCATION = 15;
	POSTNOTIFICATION = 16;
	RICH = 17;
	CHATEVENT = 18;
	MUSIC = 19;
	PAYMENT = 20;
	EXTIMAGE = 21;
	FLEX = 22;
}

enum CouponPaymentItemReward {
    ALL = 0;
    DISCOUNT = 1;
    BALANCE_REWARD = 2;
    POINT_REWARD = 3;
}

enum CustomMode {
	PROMOTION_FRIENDS_INVITE = 1;
	CAPABILITY_SERVER_SIDE_SMS = 2;
	LINE_CLIENT_ANALYTICS_CONFIGURATION = 3;
}

enum Diff {
	ADDED = 0;
	UPDATED = 1;
	REMOVED = 2;
}

enum EmailConfirmationStatus {
	NOT_SPECIFIED = 0;
	NOT_YET = 1;
	DONE = 3;
	NEED_ENFORCED_INPUT = 4;
}

enum EmailConfirmationType {
	SERVER_SIDE_EMAIL = 0;
	CLIENT_SIDE_EMAIL = 1;
}

enum ErrorCode {
	ILLEGAL_ARGUMENT = 0;
	AUTHENTICATION_FAILED = 1;
	DB_FAILED = 2;
	INVALID_STATE = 3;
	EXCESSIVE_ACCESS = 4;
	NOT_FOUND = 5;
	INVALID_MID = 9;
	NOT_A_MEMBER = 10;
	INVALID_LENGTH = 6;
	NOT_AVAILABLE_USER = 7;
	NOT_AUTHORIZED_DEVICE = 8;
	NOT_AUTHORIZED_SESSION = 14;
	INCOMPATIBLE_APP_VERSION = 11;
	NOT_READY = 12;
	NOT_AVAILABLE_SESSION = 13;
	SYSTEM_ERROR = 15;
	NO_AVAILABLE_VERIFICATION_METHOD = 16;
	NOT_AUTHENTICATED = 17;
	INVALID_IDENTITY_CREDENTIAL = 18;
	NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19;
	INTERNAL_ERROR = 20;
	NO_SUCH_IDENTITY_IDENFIER = 21;
	DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22;
	ILLEGAL_IDENTITY_CREDENTIAL = 23;
	UNKNOWN_CHANNEL = 24;
	NO_SUCH_MESSAGE_BOX = 25;
	NOT_AVAILABLE_MESSAGE_BOX = 26;
	CHANNEL_DOES_NOT_MATCH = 27;
	NOT_YOUR_MESSAGE = 28;
	MESSAGE_DEFINED_ERROR = 29;
	USER_CANNOT_ACCEPT_PRESENTS = 30;
	USER_NOT_STICKER_OWNER = 32;
	MAINTENANCE_ERROR = 33;
	ACCOUNT_NOT_MATCHED = 34;
	ABUSE_BLOCK = 35;
	NOT_FRIEND = 36;
	NOT_ALLOWED_CALL = 37;
	BLOCK_FRIEND = 38;
	INCOMPATIBLE_VOIP_VERSION = 39;
	INVALID_SNS_ACCESS_TOKEN = 40;
	EXTERNAL_SERVICE_NOT_AVAILABLE = 41;
	NOT_ALLOWED_ADD_CONTACT = 42;
	NOT_CERTIFICATED = 43;
	NOT_ALLOWED_SECONDARY_DEVICE = 44;
	INVALID_PIN_CODE = 45;
	NOT_FOUND_IDENTITY_CREDENTIAL = 46;
	EXCEED_FILE_MAX_SIZE = 47;
	EXCEED_DAILY_QUOTA = 48;
	NOT_SUPPORT_SEND_FILE = 49;
	MUST_UPGRADE = 50;
	NOT_AVAILABLE_PIN_CODE_SESSION = 51;
	EXPIRED_REVISION = 52;
	NOT_YET_PHONE_NUMBER = 54;
	BAD_CALL_NUMBER = 55;
	UNAVAILABLE_CALL_NUMBER = 56;
	NOT_SUPPORT_CALL_SERVICE = 57;
	CONGESTION_CONTROL = 58;
	NO_BALANCE = 59;
	NOT_PERMITTED_CALLER_ID = 60;
	NO_CALLER_ID_LIMIT_EXCEEDED = 61;
	CALLER_ID_VERIFICATION_REQUIRED = 62;
	NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63;
	MESSAGE_NOT_FOUND = 64;
	INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65;
	ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66;
	ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67;
	INVALID_PASSWORD_FORMAT = 69;
	FEATURE_RESTRICTED = 70;
	MESSAGE_NOT_DESTRUCTIBLE = 71;
	PAID_CALL_REDEEM_FAILED = 72;
	PREVENTED_JOIN_BY_TICKET = 73;
	SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75;
	SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76;
	SECURITY_CENTER_NOT_VERIFIED = 77;
	SECURITY_CENTER_BLOCKED_BY_SETTING = 78;
	SECURITY_CENTER_BLOCKED = 79;
	TALK_PROXY_EXCEPTION = 80;
	E2EE_INVALID_PROTOCOL = 81;
	E2EE_RETRY_ENCRYPT = 82;
	E2EE_UPDATE_SENDER_KEY = 83;
	E2EE_UPDATE_RECEIVER_KEY = 84;
	E2EE_INVALID_ARGUMENT = 85;
	E2EE_INVALID_VERSION = 86;
	E2EE_SENDER_DISABLED = 87;
	E2EE_RECEIVER_DISABLED = 88;
	E2EE_SENDER_NOT_ALLOWED = 89;
	E2EE_RECEIVER_NOT_ALLOWED = 90;
	E2EE_RESEND_FAIL = 91;
	E2EE_RESEND_OK = 92;
	HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93;
	E2EE_UPDATE_PRIMARY_DEVICE = 94;
	SUCCESS = 95;
	CANCEL = 96;
	E2EE_PRIMARY_NOT_SUPPORT = 97;
	E2EE_RETRY_PLAIN = 98;
	E2EE_RECREATE_GROUP_KEY = 99;
	E2EE_GROUP_TOO_MANY_MEMBERS = 100;
	SERVER_BUSY = 101;
	NOT_ALLOWED_ADD_FOLLOW = 102;
	INCOMING_FRIEND_REQUEST_LIMIT = 103;
	OUTGOING_FRIEND_REQUEST_LIMIT = 104;
	OUTGOING_FRIEND_REQUEST_QUOTA = 105;
	DUPLICATED = 106;
	BANNED = 107;
}

enum FeatureType {
	OBS_VIDEO = 1;
	OBS_GENERAL = 2;
}

enum FetchDirection {
	FORWARD = 1;
	BACKWARD = 2;
}

enum FriendRequestStatus {
	NONE = 0;
	AVAILABLE = 1;
	ALREADY_REQUESTED = 2;
	UNAVAILABLE = 3;
}

enum GroupAttribute {
	ALL = 255;
	NAME = 1;
	PICTURE_STATUS = 2;
	PREVENTED_JOIN_BY_TICKET = 4;
	NOTIFICATION_SETTING = 8;
}

enum IdentityProvider {
	UNKNOWN = 0;
	LINE = 1;
	NAVER_KR = 2;
	LINE_PHONE = 3;
}

enum IncentiveType {
    COUPON = 0;
    REWARD_CARD = 1;
    GIFT_POCHI = 2;
}

enum LiffErrorCode {
	INVALID_REQUEST = 1;
	UNAUTHORIZED = 2;
	CONSENT_REQUIRED = 3;
	VERSION_UPDATE_REQUIRED = 4;
	SERVER_ERROR = 100;
}

enum LiffViewFeatures {
    ADVERTISING_ID = 2;
    BLUETOOTH_LE = 3;
    GEOLOCATION = 1;
}

enum LinePayAccountInfoAccountProductType {
	PERSONAL_ACCOUNT = 1;
	CURRENT_ACCOUNT = 2;
}

enum LinePayAccountInfoAccountType {
	UNKNOWN = 0;
	LP = 1;
	PAYMETHOD_CREDIT_CARD = 2;
	PAYMETHOD_BANK_ACCOUNT = 3;
}

enum LinePayAccountInfoExtendedFeatures {
	BALANCE_INQUIRY = 1;
}

enum LinePayAccountInfoStatus {
	NULL = 0;
	ALIVE = 1;
	WAIT = 2;
	REMOVE = 3;
	IDENTIFICATION_REQUIRED = 4;
	IDENTIFICATION_WAIT = 5;
	MAINTENANCE = 6;
}

enum LocationProvider {
	GOOGLE = 0;
	BAIDU = 1;
	FOURSQUARE = 2;
}

enum LoginResultType {
	SUCCESS = 1;
	REQUIRE_QRCODE = 2;
	REQUIRE_DEVICE_CONFIRM = 3;
	REQUIRE_SMS_CONFIRM = 4;
}

enum LoginType {
	ID_CREDENTIAL = 0;
	QRCODE = 1;
	ID_CREDENTIAL_WITH_E2EE = 2;
}

enum MessageRelationType {
	FORWARD = 0;
	AUTO_REPLY = 1;
	SUBORDINATE = 2;
	REPLY = 3;
}

enum MIDType {
	USER = 0;
	ROOM = 1;
	GROUP = 2;
	SQUARE = 3;
	SQUARE_CHAT = 4;
	SQUARE_MEMBER = 5;
	BOT = 6;
}

enum ModificationType {
	ADD = 0;
	REMOVE = 1;
	MODIFY = 2;
}

enum MyChatappPriority {
	PRIORITY = 2;
	REGULAR = 1;
	MORE = 3;
}

enum NotificationItemFetchMode {
	ALL = 0;
	APPEND = 1;
}

enum NotificationStatus {
	NOTIFICATION_ITEM_EXIST = 1;
	TIMELINE_ITEM_EXIST = 2;
	NOTE_GROUP_NEW_ITEM_EXIST = 4;
	TIMELINE_BUDDYGROUP_CHANGED = 8;
	NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16;
	ALBUM_ITEM_EXIST = 32;
	TIMELINE_ITEM_DELETED = 64;
	OTOGROUP_ITEM_EXIST = 128;
	GROUPHOME_NEW_ITEM_EXIST = 256;
	GROUPHOME_HIDDEN_ITEM_CHANGED = 512;
	NOTIFICATION_ITEM_CHANGED = 1024;
	BEAD_ITEM_HIDE = 2048;
	BEAD_ITEM_SHOW = 4096;
}

enum NotificationType {
	APPLE_APNS = 1;
	GOOGLE_C2DM = 2;
	NHN_NNI = 3;
	SKT_AOM = 4;
	MS_MPNS = 5;
	RIM_BIS = 6;
	GOOGLE_GCM = 7;
	NOKIA_NNAPI = 8;
	TIZEN = 9;
	MOZILLA_SIMPLE = 10;
	LINE_BOT = 17;
	LINE_WAP = 18;
	APPLE_APNS_VOIP = 19;
	MS_WNS = 20;
	GOOGLE_FCM = 21;
}

enum NotifiedMessageType {
	MENTION = 1;
	REPLY = 2;
}

enum OpStatus {
	NORMAL = 0;
	ALERT_DISABLED = 1;
	ALWAYS = 2;
}

enum OpType {
	END_OF_OPERATION = 0;
	UPDATE_PROFILE = 1;
	UPDATE_SETTINGS = 36;
	NOTIFIED_UPDATE_PROFILE = 2;
	REGISTER_USERID = 3;
	ADD_CONTACT = 4;
	NOTIFIED_ADD_CONTACT = 5;
	BLOCK_CONTACT = 6;
	UNBLOCK_CONTACT = 7;
	NOTIFIED_RECOMMEND_CONTACT = 8;
	CREATE_GROUP = 9;
	UPDATE_GROUP = 10;
	NOTIFIED_UPDATE_GROUP = 11;
	INVITE_INTO_GROUP = 12;
	NOTIFIED_INVITE_INTO_GROUP = 13;
	CANCEL_INVITATION_GROUP = 31;
	NOTIFIED_CANCEL_INVITATION_GROUP = 32;
	LEAVE_GROUP = 14;
	NOTIFIED_LEAVE_GROUP = 15;
	ACCEPT_GROUP_INVITATION = 16;
	NOTIFIED_ACCEPT_GROUP_INVITATION = 17;
	REJECT_GROUP_INVITATION = 34;
	NOTIFIED_REJECT_GROUP_INVITATION = 35;
	KICKOUT_FROM_GROUP = 18;
	NOTIFIED_KICKOUT_FROM_GROUP = 19;
	CREATE_ROOM = 20;
	INVITE_INTO_ROOM = 21;
	NOTIFIED_INVITE_INTO_ROOM = 22;
	LEAVE_ROOM = 23;
	NOTIFIED_LEAVE_ROOM = 24;
	SEND_MESSAGE = 25;
	RECEIVE_MESSAGE = 26;
	SEND_MESSAGE_RECEIPT = 27;
	RECEIVE_MESSAGE_RECEIPT = 28;
	SEND_CONTENT_RECEIPT = 29;
	SEND_CHAT_CHECKED = 40;
	SEND_CHAT_REMOVED = 41;
	RECEIVE_ANNOUNCEMENT = 30;
	INVITE_VIA_EMAIL = 38;
	NOTIFIED_REGISTER_USER = 37;
	NOTIFIED_UNREGISTER_USER = 33;
	NOTIFIED_REQUEST_RECOVERY = 39;
	NOTIFIED_FORCE_SYNC = 42;
	SEND_CONTENT = 43;
	SEND_MESSAGE_MYHOME = 44;
	NOTIFIED_UPDATE_CONTENT_PREVIEW = 45;
	REMOVE_ALL_MESSAGES = 46;
	NOTIFIED_UPDATE_PURCHASES = 47;
	DUMMY = 48;
	UPDATE_CONTACT = 49;
	NOTIFIED_RECEIVED_CALL = 50;
	CANCEL_CALL = 51;
	NOTIFIED_REDIRECT = 52;
	NOTIFIED_CHANNEL_SYNC = 53;
	FAILED_SEND_MESSAGE = 54;
	NOTIFIED_READ_MESSAGE = 55;
	FAILED_EMAIL_CONFIRMATION = 56;
	NOTIFIED_PUSH_NOTICENTER_ITEM = 59;
	NOTIFIED_CHAT_CONTENT = 58;
	NOTIFIED_JOIN_CHAT = 60;
	NOTIFIED_LEAVE_CHAT = 61;
	NOTIFIED_TYPING = 62;
	FRIEND_REQUEST_ACCEPTED = 63;
	DESTROY_MESSAGE = 64;
	NOTIFIED_DESTROY_MESSAGE = 65;
	UPDATE_PUBLICKEYCHAIN = 66;
	NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67;
	NOTIFIED_BLOCK_CONTACT = 68;
	NOTIFIED_UNBLOCK_CONTACT = 69;
	UPDATE_GROUPPREFERENCE = 70;
	NOTIFIED_PAYMENT_EVENT = 71;
	REGISTER_E2EE_PUBLICKEY = 72;
	NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73;
	NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74;
	NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75;
	NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76;
	NOTIFIED_E2EE_KEY_UPDATE = 77;
	NOTIFIED_BUDDY_UPDATE_PROFILE = 78;
	NOTIFIED_UPDATE_LINEAT_TABS = 79;
	UPDATE_ROOM = 80;
	NOTIFIED_BEACON_DETECTED = 81;
	UPDATE_EXTENDED_PROFILE = 82;
	ADD_FOLLOW = 83;
	NOTIFIED_ADD_FOLLOW = 84;
	DELETE_FOLLOW = 85;
	NOTIFIED_DELETE_FOLLOW = 86;
	UPDATE_TIMELINE_SETTINGS = 87;
	NOTIFIED_FRIEND_REQUEST = 88;
	UPDATE_RINGBACK_TONE = 89;
	NOTIFIED_POSTBACK = 90;
	RECEIVE_READ_WATERMARK = 91;
	NOTIFIED_MESSAGE_DELIVERED = 92;
	NOTIFIED_UPDATE_CHAT_BAR = 93;
	NOTIFIED_CHATAPP_INSTALLED = 94;
	NOTIFIED_CHATAPP_UPDATED = 95;
	NOTIFIED_CHATAPP_NEW_MARK = 96;
	NOTIFIED_CHATAPP_DELETED = 97;
	NOTIFIED_CHATAPP_SYNC = 98;
	NOTIFIED_UPDATE_MESSAGE = 99;
}

enum PayAdditionalAgreementType {
	LINE_AT = 1;
	LINE_PAY_OA = 2;	
}

enum PayAdditionalAgreementIconType {
	NONE = 0;
	BUSINESS = 1;
	PREMIUM = 2;
	UNVERIFIED = 3;
}

enum PayCouponStatus {
	AVAILABLE = 1;
	SUSPENDED = 2;
	DISABLED = 3;
	EXPIRED = 4;
}

enum PayIncentiveLevelCode {
	LV1 = 0;
	LV2 = 1;
	LV3 = 2;
	LV4 = 3;
}

enum PayInvitationType {
	FRIEND_FROM = 1;
	FRIEND_TO = 2;
}

enum PayMemberGrade {
    LV1 = 0;
    LV2 = 1;
    LV3 = 2;
    LV9 = 3;
}

enum PayMemberStatus {
    ALIVE = 1;
    SUSPENDED = 2;
    UNREGISTERED = 3;
}

enum PayStatus {
	SUCCESS = 1;
	FAILURE = 2;
	IN_PROGRESS = 3;
}

enum PaymentAuthType {
    PASSWORD = 1;
    JOIN = 2;	
}

enum PaymentAvailableMethods {
	TTS = 1;
	BANK_DEPOSIT = 2;
	CREDIT_CARD = 3;
	BALANCE = 4;
	INDIVIDUAL_INFO = 5;
	REFERENCE_NO = 6;
	CITIZEN_ID = 7;
}

enum PaymentCacheableSettingsMenus {
	MAIN = 1;
	MAIN_PLUS_BUTTON = 2;
}

enum PaymentCacheableSettingsFeatures {
	IPASS = 1;
}

enum PaymentCacheableSettingsMessages {
	AUTH_METHODS_SELECTION = 1;
	PASSWORD_SETTING = 2;
	LINE_POINT_PAYMENT_INFO = 3;
	PASSWORD_SETTING_AGAIN = 4;
	PASSWORD = 5;
	GENERAL = 6;
	PASSWORD_TEMPORARY = 7;
	PASSWORD_MYCODE_AUTH = 8;
	SIGNUP = 9;
	CARD_LIST = 10;
	MYCODE_POINT_INFO = 11;
	COUPON_GUIDE = 12;
}

enum PaymentCacheableSettingsTimestamps {
	MENUS = 1;
	URLS = 2;
	CARD_VALIDATION_RULES = 3;
	MESSAGES = 4;
	MYCODE_SHORTCUT = 5;
	INVOICE = 6;
	FEATURES = 7;
}

enum PaymentCacheableSettingsTosUrlBundles {
	NONE = 0;
	ONE_TIME_PAYMENT_AGREEMENT = 1;
	SIMPLE_JOINING_AGREEMENT = 2;
	LINE_CARD_CASH_AGREEMENT = 3;
	LINE_CARD_MONEY_AGREEMENT = 4;
	JOINING_WITH_LINE_CARD_AGREEMENT = 5;
	LINE_CARD_AGREEMENT = 6;
}

enum PaymentCacheableSettingsUrlGroups {
	JOINING_AGREEMENT = 1;
	PAYMENT = 2;
	SETTING = 3;
	ACCOUNT_SETTING = 4;
	FINANCE_GATEWAY = 5;
	JOINING_AGREEMENT_V2 = 6;
	IMAGE = 7;
	SETTING_MENU = 8;
}

enum PaymentCanUnregister {
    OK = 1;
    NOT_ALIVE_USER = 2;
    NEED_BALANCE_DISCLAIMER = 3;
    ECONTEXT_CHARGING_IN_PROGRESS = 4;
    TRANSFER_IN_PROGRESS = 6;
    OK_REMAINING_BALANCE = 7;
    ADVERSE_BALANCE = 8;
    CONFIRM_REQUIRED = 9;
}

enum PaymentCheckUnregisterType {
    LINE = 1;
    LINEPAY = 2;
}

enum PaymentClientPage {
    MY_COUPON = 1;
    EXPIRED_COUPON = 2;
    PAYMENT = 3;
    MYCODE = 4;
}

enum PaymentContinueAction {
    NONE = 1;
    ALERT_AND_CLOSE = 2;
    CLOSE = 3;
    CLOSE_ONLY_PAY = 4;
}

enum PaymentCountrySettingAddressSearchType {
    NONE = 0;
    UNIQUE = 1;
    LIST = 2;
}

enum PaymentCountrySettingBalanceType {
	NONE = 1;
	JP = 2;
	TW = 3;
	TH = 4;
	ID = 5;
}

enum PaymentCountrySettingDepositMethods {
    BANK = 1;
    ATM = 2;
    CONVENIENCE_STORE = 3;
    DEBIT_CARD = 4;
    E_CHANNEL = 5;
    VIRTUAL_BANK_ACCOUNT = 6;
    AUTO = 7;
    CVS_LAWSON = 8;
    SEVEN_BANK_DEPOSIT = 9;
    CODE_DEPOSIT = 10;	
}

enum PaymentCountrySettingMenuDisplayType {
	UNKNOWN = 0;
	HORIZONTAL = 1;
	SQUARE = 2;
}

enum PaymentCountrySettingMenuBadgeType {
	NONE = 1;
	NEW = 2;
	HOT = 3;
	EVENT = 4;
}

enum PaymentCountrySettingMenuLinkType {
	BUILTIN = 1;
	CHANNEL = 2;
	APP = 3;
	WEB = 4;
}

enum PaymentCountrySettingMenuType {
	DEPOSIT = 1;
	TRANSFER = 2;
	TRANSFER_REQUEST = 3;
	DUTCH = 4;
	BALANCE_TRX_LIST = 5;
	CREDITCARD_PAY_LIST = 6;
	CREDITCARD_REG = 7;
	SETTINGS = 8;
	CUSTOM = 100;
}

enum PaymentCountrySettingRegistrationType {
    NONE = 0;
    NORMAL = 1;
    LINECARD = 2;
    LINECARD_OPTIONAL = 3;
    WEB = 4;
    IPASS = 5;
}

enum PaymentCountrySettingTos {
    TERMS_OF_SERVICE = 1;
    PRIVACY_POLICY = 2;
    DISPLAY_BASE_ON_THE_SETTLEMENT_METHOD = 3;
    LINEMONEY_TERMS_OF_SERVICE = 4;
    IMPORTANT_DISPLAY_BASE_ON_THE_SETTLEMENT_METHOD = 5;
    CREDIT_CARD_TERMS_OF_SERVICE = 6;
    AGREE_TO_PROVIDE_CUSTOMER_INFO = 7;
    LINECASH_TERMS_OF_SERVICE = 8;
    MARKETING_INFO_PROMOTION = 9;
}

enum PaymentCountrySettingWithdrawStaticMenu {
    UNSPECIFIED = 0;
    LV1 = 1;
    LV2 = 2;
    LV3 = 3;
    LV4 = 4;
    LV9 = 9;
}

enum PaymentEligibleFriendStatusType {
    AVAILABLE = 0;
    DIFFERENT_REGION = 1;
    UNSUPPORTED_DEVICE = 2;
    PHONE_NUMBER_UNREGISTERED = 3;
    UNAVAILABLE_FROM_LINE_PAY = 4;
    INVALID_USER = 5;
}

enum PaymentErrorCode {
	SUCCESS = 0;
	GENERAL_USER_ERROR = 1000;
	ACCOUNT_NOT_EXISTS = 1101;
	ACCOUNT_INVALID_STATUS = 1102;
	ACCOUNT_ALREADY_EXISTS = 1103;
	MERCHANT_NOT_EXISTS = 1104;
	MERCHANT_INVALID_STATUS = 1105;
	AGREEMENT_REQUIRED = 1107;
	BLACKLISTED = 1108;
	WRONG_PASSWORD = 1109;
	INVALID_CREDIT_CARD = 1110;
	LIMIT_EXCEEDED = 1111;
	CANNOT_PROCEED = 1115;
	TOO_WEAK_PASSWORD = 1120;
	CANNOT_CREATE_ACCOUNT = 1125;
	TEMPORARY_PASSWORD_ERROR = 1130;
	MISSING_PARAMETERS = 1140;
	NO_VALID_MYCODE_ACCOUNT = 1141;
	INSUFFICIENT_BALANCE = 1142;
	TRANSACTION_NOT_FOUND = 1150;
	TRANSACTION_FINISHED = 1152;
	PAYMENT_AMOUNT_WRONG = 1153;
	BALANCE_ACCOUNT_NOT_EXISTS = 1157;
	DUPLICATED_CITIZEN_ID = 1158;
	PAYMENT_REQUEST_NOT_FOUND = 1159;
	AUTH_FAILED = 1169;
	PASSWORD_SETTING_REQUIRED = 1171;
	TRANSACTION_ALREADY_PROCESSED = 1172;
	CURRENCY_NOT_SUPPORTED = 1178;
	PAYMENT_NOT_AVAILABLE = 1180;
	TRANSFER_REQUEST_NOT_FOUND = 1181;
	INVALID_PAYMENT_AMOUNT = 1183;
	INSUFFICIENT_PAYMENT_AMOUNT = 1184;
	EXTERNAL_SYSTEM_MAINTENANCE = 1185;
	EXTERNAL_SYSTEM_INOPERATIONAL = 1186;
	SESSION_EXPIRED = 1192;
	UPGRADE_REQUIRED = 1195;
	REQUEST_TOKEN_EXPIRED = 1196;
	OPERATION_FINISHED = 1198;
	EXTERNAL_SYSTEM_ERROR = 1199;
	PARTIAL_AMOUNT_APPROVED = 1299;
	PINCODE_AUTH_REQUIRED = 1600;
	ADDITIONAL_AUTH_REQUIRED = 1601;
	NOT_BOUND = 1603;
	OTP_USER_REGISTRATION_ERROR = 1610;
	OTP_CARD_REGISTRATION_ERROR = 1611;
	NO_AUTH_METHOD = 1612;
	GENERAL_USER_ERROR_RESTART = 1696;
	GENERAL_USER_ERROR_REFRESH = 1697;
	GENERAL_USER_ERROR_CLOSE = 1698;
	INTERNAL_SERVER_ERROR = 9000;
	INTERNAL_SYSTEM_MAINTENANCE = 9999;
	UNKNOWN_ERROR = 10000;
}

enum PaymentFlowAuthType {
    UNKNOWN = 0;
    NONE = 1;
    LP_PINCODE = 2;
    OTP = 3;
    IDPW = 4;
}

enum PaymentFlowHandleableOps {
	SESSION = 1;
}

enum PaymentFlowType {
	GENERAL = 1;
}

enum PaymentValidateEligibleFriendsType {
    TRANSFER = 1;
    TRANSFER_REQUEST = 2;
    DUTCH = 3;
    INVITATION = 4;
}

enum PaymenInvoiceSettings {
    TRANSFER_ACCEPTABLE = 1;
    REMOVE_INVOICE = 2;
    INVOICE_CODE = 3;
    SHOW_ALWAYS_INVOICE = 4;
}

enum PaymentJoinPath {
    UNKNOWN = 0;
    MORE_TAB = 1;
    CHAT_ROOM_PLUS_MENU = 2;
    TRANSFER = 3;
    PAYMENT = 4;
    LINECARD = 5;
    INVITATION = 6;
}

enum PaymentListLinePayCardAccounts {
    CARD_ALL = 1;
    CARD_DEPOSIT = 2;
}

enum PaymentListTradeNumbersStatus {
    ALL = 7;
    READY = 1;
    COMPLETE = 2;
    WAIT = 3;
    CANCEL = 4;
    FAIL = 5;
    EXPIRE = 6;
}

enum PaymentListTradeNumbersType {
    NULL = 0;
    ATM = 1;
    CONVENIENCE_STORE = 2;
    ALL = 3;
}

enum PaymentOneTimeKeyType {
    PAYMENT = 1;
    DEPOSIT = 2;
}

enum PaymentOperationChannelType {
    NULL = 0;
    ATM = 1;
    CONVENIENCE_STORE = 2;
}

enum PaymentOperationType {
    CHARGE = 1;
    WITHDRAW = 2;
}

enum PaymentPasswordType {
    PASSWORD = 1;
    CARRY_FORWARD = 2;
}

enum PaymentRegionalIdentificationType {
    CITIZEN_ID = 1;
    PASSPORT = 2;
    WORK_PERMIT = 3;
    ALIEN_CARD = 4;
}

enum PaymentRequestFlowType {
    GENERAL = 0;
    SKIP_INTRO_AND_PAY_CONFIRM_SCREEN = 1;
}

enum PaymentResolutionType {
    SCALE2 = 1;
    SCALE3 = 2;
    HDPI = 3;
    XHDPI = 4;
}

enum PaymentSearchType {
    MID = 1;
    REF_NO = 2;
    SVC_NO = 3;
}

enum PaymentTransactionHistoryDestination {
    NONE = 1;
    DEPOSIT_BANKS = 2;
    BALANCE_TRX_LIST = 3;
    TRANSFER_REQ_LIST = 4;
    CREDITCARD_PAY_LIST = 5;
    BALANCE_PAY_LIST = 6;
    LINECASH_JOIN = 7;
    IDENTIFICATION_UPLOAD = 8;
    CUSTOM_CENTER = 9;
}

enum PaymentTransactionHistoryType {
    NONE = 1;
    MESSAGE = 2;
    NOTIFICATION = 3;
}

enum PaymentType {
	PAYMENT_APPLE = 1;
	PAYMENT_GOOGLE = 2;
}

enum PaymentUserDetailStatus {
    NORMAL = 0;
    FRAUD = 1;
    PW_LOCKOUT = 2;
    PHONE_NOT_REGISTERED = 3;
    MIG_INFO_NOT_REGISTERED = 4;
    NOT_SUPPORTED_DEVICE = 5;
    SUSPENDED_BY_USER = 6;
    CHANGED_COUNTRY = 7;
    SUSPENDED_BY_ADMIN = 8;
    AUTOMATIC_REMOVED = 9;
    REMOVED_BY_USER = 10;
    REMOVED_BY_ADMIN = 11;
    AUTH_LOCKOUT = 12;
    ID_NO_DUPLICATED = 13;
}

enum PaymentUserIdentification {
    NULL = 0;
    UNIDEN = 1;
    WAIT = 2;
    IDENTIFIED = 3;
    CHECKING = 4;
}

enum PaymentUserIntro {
    NONE = 0;
    TW_BALANCE_CUB_OPEN = 1;
    TH_BALANCE_OPEN = 2;
}

enum PaymentUserPasswordVersion {
    UNKNOWN = 0;
    VER1 = 1;
    VER2 = 2;
    EXTERNAL = 4;
    NONE = 3;
}

enum PaymentUserStatus {
    UNKNOWN = 0;
    ALIVE = 1;
    NOT_JOIN = 6;
    SUSPENDED = 7;
    REMOVED = 8;
}

enum PaymentViewType {
    PAYMENT = 0;
    REGISTER = 1;
}

enum PreconditionFailedExtraInfo {
	DUPLICATED_DISPLAY_NAME = 0;
}

enum ProductBannerLinkType {
	BANNER_LINK_NONE = 0;
	BANNER_LINK_ITEM = 1;
	BANNER_LINK_URL = 2;
	BANNER_LINK_CATEGORY = 3;
}

enum ProductEventType {
	NO_EVENT = 0;
	CARRIER_ANY = 65537;
	BUDDY_ANY = 131073;
	INSTALL_IOS = 196609;
	INSTALL_ANDROID = 196610;
	MISSION_ANY = 262145;
	MUSTBUY_ANY = 327681;
}

enum ProductSearchSummarySubType {
    GENERAL = 0;
    CREATORS = 1;
    STICON = 2;
}

enum ProductSearchSummaryType {
    STICKER = 1;
    THEME = 2;
    STICON = 3;
}

enum ProfileAttribute {
	ALL = 511;
	EMAIL = 1;
	DISPLAY_NAME = 2;
	PHONETIC_NAME = 4;
	PICTURE = 8;
	STATUS_MESSAGE = 16;
	ALLOW_SEARCH_BY_USERID = 32;
	ALLOW_SEARCH_BY_EMAIL = 64;
	BUDDY_STATUS = 128;
	MUSIC_PROFILE = 256;
}

enum PromotionIcons {
    LINE_PAY = 0;
    LINE_POINT = 1;
}

enum PromotionInfoType {
    NONE = 0;
    CARRIER = 1;
    BUDDY = 2;
    INSTALL = 3;
    MISSION = 4;
    MUSTBUY = 5;
}

enum PromotionMissionType {
    DEFAULT = 1;
    VIEW_VIDEO = 2;
}

enum PublicType {
	HIDDEN = 0;
	PUBLIC = 1000;
}

enum ReportCategory {
	PUSH_NORMAL_PLAIN = 0;
	PUSH_NORMAL_E2EE = 1;
	PUSH_VOIP_PLAIN = 2;
	PUSH_VOIP_E2EE = 3;
}

enum ReportType {
	ADVERTISING = 1;
	GENDER_HARASSMENT = 2;
	HARASSMENT = 3;
	OTHER = 4;
}

enum SearchErrorCode {
    UNKNOWN = 0;
    SUCCESS = 1;
    AUTHENTICATION_FAILURE = 2;
    TIMEOUT = 3;
    MAINTENANCE = 4;
    ILLEGAL_ARGUMENT = 5;
    INTERNAL_ERROR = 6;
}

enum SecurityCenterSettingsType {
	NOT_APPLICABLE = 0;
	NOT_SET = 1;
	SET = 2;
	NEED_ENFORCED_INPUT = 3;
}

enum ServiceCode {
	UNKNOWN = 0;
	TALK = 1;
	SQUARE = 2;
}

enum SettingsAttribute {
	ALL = 2147483647;
	NOTIFICATION_ENABLE = 1;
	NOTIFICATION_MUTE_EXPIRATION = 2;
	NOTIFICATION_NEW_MESSAGE = 4;
	NOTIFICATION_GROUP_INVITATION = 8;
	NOTIFICATION_SHOW_MESSAGE = 16;
	NOTIFICATION_INCOMING_CALL = 32;
	NOTIFICATION_SOUND_MESSAGE = 256;
	NOTIFICATION_SOUND_GROUP = 512;
	NOTIFICATION_DISABLED_WITH_SUB = 65536;
	NOTIFICATION_PAYMENT = 131072;
	PRIVACY_SYNC_CONTACTS = 64;
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 128;
	PRIVACY_SEARCH_BY_USERID = 8192;
	PRIVACY_SEARCH_BY_EMAIL = 16384;
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152;
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608;
	PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824;
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432;
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864;
	PRIVACY_AGREE_USE_PAIDCALL = 134217728;
	CONTACT_MY_TICKET = 1024;
	IDENTITY_PROVIDER = 2048;
	IDENTITY_IDENTIFIER = 4096;
	SNS_ACCOUNT = 524288;
	PHONE_REGISTRATION = 1048576;
	PREFERENCE_LOCALE = 32768;
	CUSTOM_MODE = 4194304;
	EMAIL_CONFIRMATION_STATUS = 16777216;
	ACCOUNT_MIGRATION_PINCODE = 268435456;
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912;
	SECURITY_CENTER_SETTINGS = 262144;
}

enum SettingsAttributeEx {
	NOTIFICATION_ENABLE = 0;
	NOTIFICATION_MUTE_EXPIRATION = 1;
	NOTIFICATION_NEW_MESSAGE = 2;
	NOTIFICATION_GROUP_INVITATION = 3;
	NOTIFICATION_SHOW_MESSAGE = 4;
	NOTIFICATION_INCOMING_CALL = 5;
	NOTIFICATION_SOUND_MESSAGE = 8;
	NOTIFICATION_SOUND_GROUP = 9;
	NOTIFICATION_DISABLED_WITH_SUB = 16;
	NOTIFICATION_PAYMENT = 17;
	NOTIFICATION_MENTION = 40;
	NOTIFICATION_THUMBNAIL = 45;
	PRIVACY_SYNC_CONTACTS = 6;
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 7;
	PRIVACY_SEARCH_BY_USERID = 13;
	PRIVACY_SEARCH_BY_EMAIL = 14;
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21;
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23;
	PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35;
	PRIVACY_ALLOW_FRIEND_REQUEST = 30;
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25;
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26;
	PRIVACY_AGREE_USE_PAIDCALL = 27;
	CONTACT_MY_TICKET = 10;
	IDENTITY_PROVIDER = 11;
	IDENTITY_IDENTIFIER = 12;
	SNS_ACCOUNT = 19;
	PHONE_REGISTRATION = 20;
	PREFERENCE_LOCALE = 15;
	CUSTOM_MODE = 22;
	EMAIL_CONFIRMATION_STATUS = 24;
	ACCOUNT_MIGRATION_PINCODE = 28;
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29;
	SECURITY_CENTER_SETTINGS = 18;
	E2EE_ENABLE = 33;
	ENABLE_SOUND_TO_TEXT = 47;
	HITOKOTO_BACKUP_REQUESTED = 34;
	CONTACT_ALLOW_FOLLOWING = 36;
	PRIVACY_ALLOW_NEARBY = 37;
	AGREEMENT_NEARBY = 38;
	AGREEMENT_SQUARE = 39;
	ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41;
	AGREEMENT_BOT_USE = 42;
	AGREEMENT_SHAKE_FUNCTION = 43;
	AGREEMENT_MOBILE_CONTACT_NAME = 44;
	AGREEMENT_SOUND_TO_TEXT = 46;
}

enum ShopErrorCode {
	UNKNOWN = 0;
	NONE = 1;
	ILLEGAL_ARGUMENT = 16641;
	NOT_FOUND = 16642;
	NOT_AVAILABLE = 16643;
	NOT_PAID_PRODUCT = 16644;
	NOT_FREE_PRODUCT = 16645;
	ALREADY_OWNED = 16646;
	ERROR_WITH_CUSTOM_MESSAGE = 16647;
	NOT_AVAILABLE_TO_RECIPIENT = 16648;
	NOT_AVAILABLE_FOR_CHANNEL_ID = 16649;
	NOT_SALE_FOR_COUNTRY = 16650;
	NOT_SALES_PERIOD = 16651;
	NOT_SALE_FOR_DEVICE = 16652;
	NOT_SALE_FOR_VERSION = 16653;
	ALREADY_EXPIRED = 16654;
	AUTHENTICATION_FAILED = 16897;
	BALANCE_SHORTAGE = 17153;
	INTERNAL_SERVER_ERROR = 20737;
	SERVICE_IN_MAINTENANCE_MODE = 20738;
}

enum SnsIdType {
	FACEBOOK = 1;
	SINA = 2;
	RENREN = 3;
	FEIXIN = 4;
	BBM = 5;
}

enum SquareAttribute {
    NAME = 1;
    WELCOME_MESSAGE = 2;
    PROFILE_IMAGE = 3;
    DESCRIPTION = 4;
    SEARCHABLE = 6;
    CATEGORY = 7;
    INVITATION_URL = 8;
    ABLE_TO_USE_INVITATION_URL = 9;
    STATE = 10;
}

enum SquareAuthorityAttribute {
	UPDATE_SQUARE_PROFILE = 1;
	INVITE_NEW_MEMBER = 2;
	APPROVE_JOIN_REQUEST = 3;
	CREATE_POST = 4;
	CREATE_OPEN_SQUARE_CHAT = 5;
	DELETE_SQUARE_CHAT_OR_POST = 6;
	REMOVE_SQUARE_MEMBER = 7;
	GRANT_ROLE = 8;
	ENABLE_INVITATION_TICKET = 9;
	CREATE_CHAT_ANNOUNCEMENT = 10;
	UPDATE_MAX_CHAT_MEMBER_COUNT = 11;
}

enum SquareChatAnnouncementType {
	TEXT_MESSAGE = 0;
}

enum SquareChatAttribute {
	NAME = 2;
	SQUARE_CHAT_IMAGE = 3;
	STATE = 4;
	TYPE = 5;
	MAX_MEMBER_COUNT = 6;
}

enum SquareChatMemberAttribute {
	MEMBERSHIP_STATE = 4;
	NOTIFICATION_MESSAGE = 6;
}

enum SquareChatMembershipState {
	JOINED = 1;
	LEFT = 2;
}

enum SquareChatState {
    ALIVE = 0;
    DELETED = 1;
    SUSPENDED = 2;
}

enum SquareChatType {
	OPEN = 1;
	SECRET = 2;
	ONE_ON_ONE = 3;
	SQUARE_DEFAULT = 4;
}

enum SquareErrorCode {
	UNKNOWN = 0;
	INTERNAL_ERROR = 500;
	NOT_IMPLEMENTED = 501;
	TRY_AGAIN_LATER = 503;
	MAINTENANCE = 505;
	ILLEGAL_ARGUMENT = 400;
	AUTHENTICATION_FAILURE = 401;
	FORBIDDEN = 403;
	NOT_FOUND = 404;
	REVISION_MISMATCH = 409;
	PRECONDITION_FAILED = 410;
}

enum SquareEventStatus {
    NORMAL = 1;
    ALERT_DISABLED = 2;
}

enum SquareEventType {
	RECEIVE_MESSAGE = 0;
	SEND_MESSAGE = 1;
	NOTIFIED_JOIN_SQUARE_CHAT = 2;
	NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3;
	NOTIFIED_LEAVE_SQUARE_CHAT = 4;
	NOTIFIED_DESTROY_MESSAGE = 5;
	NOTIFIED_MARK_AS_READ = 6;
	NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7;
	NOTIFIED_KICKOUT_FROM_SQUARE = 19;
	NOTIFIED_SHUTDOWN_SQUARE = 18;
	NOTIFIED_DELETE_SQUARE_CHAT = 20;
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30;
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31;
	NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT = 38;
	NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37;
	NOTIFIED_ADD_BOT = 33;
	NOTIFIED_REMOVE_BOT = 34;
	NOTIFIED_UPDATE_SQUARE = 8;
	NOTIFIED_UPDATE_SQUARE_STATUS = 9;
	NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10;
	NOTIFIED_UPDATE_SQUARE_MEMBER = 11;
	NOTIFIED_UPDATE_SQUARE_CHAT = 12;
	NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13;
	NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14;
	NOTIFIED_CREATE_SQUARE_MEMBER = 15;
	NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16;
	NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17;
	NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32;
	NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36;
	NOTIFICATION_JOIN_REQUEST = 21;
	NOTIFICATION_JOINED = 22;
	NOTIFICATION_PROMOTED_COADMIN = 23;
	NOTIFICATION_PROMOTED_ADMIN = 24;
	NOTIFICATION_DEMOTED_MEMBER = 25;
	NOTIFICATION_KICKED_OUT = 26;
	NOTIFICATION_SQUARE_DELETE = 27;
	NOTIFICATION_SQUARE_CHAT_DELETE = 28;
	NOTIFICATION_MESSAGE = 29;
}

enum SquareFeatureControlState {
	DISABLED = 1;
	ENABLED = 2;
}

enum SquareFeatureSetAttribute {
	CREATING_SECRET_SQUARE_CHAT = 1;
	INVITING_INTO_OPEN_SQUARE_CHAT = 2;
}

enum SquareMemberAttribute {
	DISPLAY_NAME = 1;
	PROFILE_IMAGE = 2;
	ABLE_TO_RECEIVE_MESSAGE = 3;
	MEMBERSHIP_STATE = 5;
	ROLE = 6;
	PREFERENCE = 7;	
}

enum SquareMemberRelationAttribute {
	BLOCKED = 1;
}

enum SquareMemberRelationState {
	NONE = 1;
	BLOCKED = 2;
}

enum SquareMemberRole {
	ADMIN = 1;
	CO_ADMIN = 2;
	MEMBER = 10;
}

enum SquareMembershipState {
	JOIN_REQUESTED = 1;
	JOINED = 2;
	REJECTED = 3;
	LEFT = 4;
	KICK_OUT = 5;
	BANNED = 6;
	DELETED = 7;
}

enum SquarePreferenceAttribute {
	FAVORITE = 1;
	NOTI_FOR_NEW_JOIN_REQUEST = 2;
}

enum SquareType {
	CLOSED = 0;
	OPEN = 1;
}

enum SpotItemCategory {
    UNKNOWN = 0;
    GOURMET = 1;
    BEAUTY = 2;
    TRAVEL = 3;
    SHOPPING = 4;
    ENTERTAINMENT = 5;
    SPORTS = 6;
    TRANSPORT = 7;
    LIFE = 8;
    HOSPITAL = 9;
    FINANCE = 10;
    EDUCATION = 11;
    OTHER = 12;
    ALL = 0000;
}

enum StickerResourceType {
	STATIC = 1;
	ANIMATION = 2;
	SOUND = 3;
	ANIMATION_SOUND = 4;
	POPUP = 5;
	POPUP_SOUND = 6;
}

enum SymbolLocation {
	PREFIX = 1;
	SUFFIX = 2;
}

enum SyncTriggerReason {
	OTHER = 0;
	REVISION_GAP_TOO_LARGE = 1;
	OPERATION_EXPIRED = 2;
}

enum TicketErrorCode {
	UNKNOWN_ERROR = 0;
	CHANNEL_TOKEN_EXPIRED = 1;
	CHANNEL_TOKEN_INVALID = 2;
	TICKET_ALREADY_USED_ERROR = 3;
	INTERNAL_SERVER_ERROR = 4;
	OLDER_LINE_VERSION_ERROR = 5;
}

enum ThemeResourceType {
    STATIC = 1;
    ANIMATION = 2;
}

enum ThingsDeviceProductType {
    CLOUD = 1;
    BLE = 2;
}

enum ThingsErrorCode {
    INTERNAL_SERVER_ERROR = 0;
    UNAUTHORIZED = 1;
    INVALID_REQUEST = 2;
    INVALID_STATE = 3;
}

enum TicketEntryCheckMethod {
	BUTTON = 0;
	QR = 1;
}

enum TMessageBoxStatus {
	ACTIVATED = 1;
	UNREAD = 2;
}

enum TransactionInputConditions {
    UNKNOWN = 0;
    MAIN = 12;
    DEPOSIT = 1;
    DEPOSIT_BANK = 1;
    DEPOSIT_DEBIT = 11;
    DEPOSIT_ATM = 8;
    DEPOSIT_CONVENIENCE_STORE = 9;
    WITHDRAWAL = 2;
    TRANSFER = 3;
    PAYMENT = 4;
    TRANSFER_REQUEST = 5;
    DUTCH = 6;
    REMOVAL = 7;
    IDENTIFICATION = 13;
    CREDIT_CARD_REGISTRATION = 14;
}

enum TransactionDetailType {
    NULL = 0;
    SEND = 1;
    RECEIVED = 2;
}

enum TransactionType {
	UNKNOWN = 0;
	PAYMENT = 1;
	PAYMENT_CANCEL = 2;
	PARTIAL_CANCEL = 3;
	TRANSFER = 4;
	TRANSFER_FAIL = 13; 
	NOT_JOIN_TRANSFER = 11;
	NOT_JOIN_TRANSFER_COMPLETE = 12;
	NOT_JOIN_TRANSFER_REFUND = 9;
	DEPOSIT = 5;
	DEPOSIT_WAIT = 10;
	DEPOSIT_CANCEL = 14;
	WITHDRAW = 6;
	WITHDRAW_COMPLETE = 7;
	WITHDRAW_FAIL = 8;
}

enum TransactionUserType {
    NULL = 0;
    MEMBER = 1;
    NORMAL = 2;
    MERCHANT = 3;
    ADMIN = 4;
}

enum TransactionWithdrawFeeType {
    AMOUNT = 1;
    RATE = 2;
}

enum TransferRequestStatus {
    READY = 1;
    COMPLETE = 2;
    REQUEST = 3;
    CANCEL = 4;
    FAIL = 5;
}

enum TransferRequestType {
    DUTCH_FROM = 1;
    FROM = 2;
    DUTCH_TO = 3;
    TO = 4;
    MULTI_TO = 5;
    MULTI_FROM = 6;
}

enum VerificationMethod {
	NO_AVAILABLE = 0;
	PIN_VIA_SMS = 1;
	CALLERID_INDIGO = 2;
	PIN_VIA_TTS = 4;
	SKIP = 10;
}

enum VerificationResult {
	FAILED = 0;
	OK_NOT_REGISTERED_YET = 1;
	OK_REGISTERED_WITH_SAME_DEVICE = 2;
	OK_REGISTERED_WITH_ANOTHER_DEVICE = 3;
}

enum WalletErrorCode {
    AUTHENTICATION_FAILED = 401;
    INTERNAL_SERVER_ERROR = 500;
    SERVICE_IN_MAINTENANCE_MODE = 503;
}

exception BotException {
	1: BotErrorCode errorCode;
	2: string reason;
	3: map<string, string> parameterMap;
}

exception ChatappException {
	1: ChatappErrorCode code;
	2: string reason;
}

exception LiffException {
	1: LiffErrorCode code;
	2: string message;
	3: LiffErrorPayload payload;
}

exception PaymentException {
	1: PaymentErrorCode errorCode;
	2: string debugReason;
	3: string serverDefinedMessage;
	4: map<string, string> errorDetailMap;
}

exception SearchException {
	1: SearchErrorCode code;
	2: string reason;
	3: map<string, string> extra;
}

exception ShopException {
	1: ShopErrorCode code;
	2: string reason;
	3: map<string, string> parameterMap;
}

exception SquareException {
	1: SquareErrorCode errorCode;
	2: ErrorExtraInfo errorExtraInfo;
	3: string reason;
}

exception ThingsException {
	1: ThingsErrorCode code;
	2: string reason;
}

exception TicketException {
	1: TicketErrorCode code;
	2: string reason;
	3: map<string, string> parameterMap;
}

exception WalletException {
	1: WalletErrorCode code;
	2: string reason;
	3: map<string, string> attributes;
}

struct AddFriendData {
	1: string mid;
}

struct AdditionalInfoItem {
	1: string id;
	2: i32 type;
	3: string title;
	4: string descr;
	5: string iconUrl;
	6: string link;
}

struct Admission {
	1: i64 admissionTime;
}

struct ApproveSquareMembersRequest {
	2: string squareMid;
	3: list<string> requestedMemberMids;
}

struct ApproveSquareMembersResponse {
	1: list<SquareMember> approvedMembers;
	2: SquareStatus status;
}

struct AutocompleteCandidate {
	1: string candidate;
}

struct AutocompleteRequest {
	1: string query;
	2: string region;
	3: i32 source;
	4: string sid;
}

struct AutocompleteResult {
	1: list<string> modifiedQueries;
	2: list<AutocompleteCandidate> candidates;
}

struct BalanceInfo {
	3: string balanceLimit;
	12: string rechargeableAmount;
	13: DisplayMoney balanceAmount;
	16: MoneyRange bankChargeRange;
	17: MoneyRange atmChargeRange;
	18: MoneyRange convenienceStoreChargeRange;
	19: MoneyRange eachPayRange;
	20: MoneyRange eachTransferRange;
	21: MoneyRange eachWithdrawRange;
	22: MoneyRange balanceNotifySetupRange;
	23: MoneyRange eachTransferRequestRange;
	24: MoneyRange debitCardChargeRange;
	25: string responseToken;
}

struct BankBranchInfo {
	1: string branchId;
	2: string branchCode;
	3: string name;
	4: string name2;
}

struct BankInfo {
	1: i64 bankId;
	2: string financialCorpId;
	3: string financialCorpCode;
	4: BankInfoType type;
	5: string name;
	6: string imageUrl;
	7: string name2;
	8: string preCreationText;
}

struct BleProduct {
	1: string serviceUuid;
	2: string psdiServiceUuid;
	3: string psdiCharacteristicUuid;
	4: string name;
	5: string profileImageLocation;
}

struct BuddySearchResult {
	1: string mid;
	2: string displayName;
	3: string pictureStatus;
	4: string picturePath;
	5: string statusMessage;
	6: bool businessAccount;
	7: i32 iconType;
	8: BotType botType;
}

struct ButtonActionData {
	1: AddFriendData addFriendData;
	2: InstallAppData installAppData;
	3: JumpUrlData jumpUrlData;
}

struct CardBrandInfo {
	2: string imageUrl;
	3: string mainImageUrl;
	4: string regImageUrl;
	5: string bgcolor;
	6: string textColor;
	7: string cardCodeName;
	8: CardBrand cardBrand;
}

struct Category {
	1: i32 id;
	2: string name;
}

struct CategoryItem {
	1: i32 collection;
	2: i32 categoryId;
	3: string name;
}

struct Chatapp {
	1: string chatappId;
	2: string name;
	3: string icon;
	4: string url;
	5: ChatappAvailableChatTypes availableChatTypes;
}

struct CheckOperationResult {
	1: bool tradable;
	2: string reason;
	3: string detailMessage;
}

struct CompositePaymentItem {
	1: CompositePaymentItemMethod method;
	2: string amount;
	3: string lpAccountNo;
	4: string currency;
}

struct CouponPaymentItem {
	1: string couponCode;
	2: CouponPaymentItemReward reward;
	3: string amount;
}

struct CreatedPaymentUserInfoEx {
	1: bool carryOverAvailable;
}

struct CreateSquareRequest {
	1: i32 reqSeq;
	2: Square square;
	3: SquareMember creator;
}

struct CreateSquareResponse {
	1: Square square;
	2: SquareMember creator;
	3: SquareAuthority authority;
	4: SquareStatus status;
	5: SquareFeatureSet featureSet;
	6: NoteStatus noteStatus;
}

struct CreateSquareChatAnnouncementRequest {
	1: i32 reqSeq;
	2: string squareChatMid;
	3: SquareChatAnnouncement squareChatAnnouncement;
}

struct CreateSquareChatAnnouncementResponse {
	1: SquareChatAnnouncement announcement;
}

struct CreateSquareChatRequest {
	1: i32 reqSeq;
	2: SquareChat squareChat;
	3: list<string> squareMemberMids;
}

struct CreateSquareChatResponse {
	1: SquareChat squareChat;
	2: SquareChatStatus squareChatStatus;
	3: SquareChatMember squareChatMember;
}

struct CurrencyInfo {
	1: string currency;
	2: string currencyUnit;
	3: i32 scale;
	4: SymbolLocation symbolLocation;
}

struct CurrencyProperty {
	1: string code;
	2: string symbol;
	3: SymbolLocation position;
	4: i32 scale;
}

struct DeleteSquareChatAnnouncementRequest {
	2: string squareChatMid;
	3: i64 announcementSeq;
}

struct DeleteSquareChatAnnouncementResponse {
	
}

struct DeleteSquareChatRequest {
	2: string squareChatMid;
	3: i64 revision;
}

struct DeleteSquareChatResponse {
	
}

struct DeleteSquareRequest {
	2: string mid;
	3: i64 revision;
}

struct DeleteSquareResponse {
	
}

struct DestroyMessageRequest {
	2: string squareChatMid;
	4: string messageId;
}

struct DestroyMessageResponse {
	
}

struct DestroyMessagesRequest {
	2: string squareChatMid;
	4: set<string> messageIds;
}

struct DestroyMessagesResponse {
	
}

struct DeviceLinkRequest {
	1: string deviceId;
}

struct DeviceUnlinkRequest {
	1: string deviceId;
}

struct DisplayMoney {
	1: string amount;
	2: string amountString;
	3: string currency;
}

struct ErrorExtraInfo {
	1: PreconditionFailedExtraInfo preconditionFailedExtraInfo;
}

struct FetchMyEventsRequest {
	1: i64 subscriptionId;
	2: string syncToken;
	3: i32 limit;
	4: string continuationToken;
}

struct FetchMyEventsResponse {
	1: SubscriptionState subscription;
	2: list<SquareEvent> events;
	3: string syncToken;
	4: string continuationToken;
}

struct FetchSquareChatEventsRequest {
	1: i64 subscriptionId;
	2: string squareChatMid;
	3: string syncToken;
	4: i32 limit;
	5: FetchDirection direction;
	6: BooleanState inclusive;
}

struct FetchSquareChatEventsResponse {
	1: SubscriptionState subscription;
	2: list<SquareEvent> events;
	3: string syncToken;
	4: string continuationToken;
}

struct FindSquareByEmidRequest {
	1: string emid;
}

struct FindSquareByEmidResponse {
	1: Square square;
	2: SquareMember myMembership;
	3: SquareAuthority squareAuthority;
	4: SquareStatus squareStatus;
	5: SquareFeatureSet squareFeatureSet;
	6: NoteStatus noteStatus;
}

struct FindSquareByInvitationTicketRequest {
	2: string invitationTicket;
}

struct FindSquareByInvitationTicketResponse {
	1: Square square;
	2: SquareMember myMembership;
	3: SquareAuthority squareAuthority;
	4: SquareStatus squareStatus;
	5: SquareFeatureSet squareFeatureSet;
	6: NoteStatus noteStatus;
	7: SquareChat chat;
	8: SquareChatStatus chatStatus;
}

struct GeoAddressItem {
	1: double latitude;
	2: double longitude;
	3: string displayAddress;
}

struct Geolocation {
	1: double latitude;
	2: double longitude;
}

struct GeolocationAccuracy {
	1: double radiusMeters;
	2: double radiusConfidence;
}

struct GetBleDeviceRequest {
	1: string serviceUuid;
	2: string psdi;
}

struct GetBalanceSummaryRequest {

}

struct GetBalanceSummaryResponse {
	1: LinePayInfo payInfo;
	2: LinePointInfo pointInfo;
	3: LineCoinInfo coinInfo;
}

struct GetChatappRequest {
	1: string chatappId;
	2: string language;
}

struct GetChatappResponse {
	1: Chatapp app;
}

struct GetInvitationTicketUrlRequest {
	2: string mid;
}

struct GetInvitationTicketUrlResponse {
	1: string invitationURL;
}

struct GetJoinableSquareChatsRequest {
	1: string squareMid;
	10: string continuationToken;
	11: i32 limit;
}

struct GetJoinableSquareChatsResponse {
	1: list<SquareChat> squareChats;
	2: string continuationToken;
	3: i32 totalSquareChatCount;
	4: map<string, SquareChatStatus> squareChatStatuses;
}

struct GetJoinedSquareChatsRequest {
	2: string continuationToken;
	3: i32 limit;
}

struct GetJoinedSquareChatsResponse {
	1: list<SquareChat> chats;
	2: map<string, SquareChatMember> chatMembers;
	3: map<string, SquareChatStatus> statuses;
	4: string continuationToken;
}

struct GetJoinedSquaresRequest {
	2: string continuationToken;
	3: i32 limit;
}

struct GetJoinedSquaresResponse {
	1: list<Square> squares;
	2: map<string, SquareMember> members;
	3: map<string, SquareAuthority> authorities;
	4: map<string, SquareStatus> statuses;
	5: string continuationToken;
	6: map<string, NoteStatus> noteStatuses;
}

struct GetMyChatappsRequest {
	1: string language;
	2: string continuationToken;
}

struct GetMyChatappsResponse {
	1: list<MyChatapp> apps;
	2: string continuationToken;
}

struct GetNoteStatusRequest {
	2: string squareMid;
}

struct GetNoteStatusResponse {
	1: string squareMid;
	2: NoteStatus status;
}

struct GetPromotionsRequest {
	1: string categoryKey;
	2: Geolocation geoLocation;
	3: binary continuationToken;
	4: i32 limit;
}

struct GetPromotionsResponse {
	1: list<Promotion> promotions;
	2: string categorykey;
	3: list<WalletCategory> availableCategories;
	4: binary continuationToken;
}

struct GetReservationRequest {
	1: string reservationNumber;
}

struct GetReservationResponse {
	1: Reservation reservation;
}

struct GetReservationsRequest {
	1: i64 lastFetchTimeStamp;
}

struct GetReservationsResponse {
	1: list<Reservation> reservations;
}

struct GetSquareAuthoritiesRequest {
	2: set<string> squareMids;
}

struct GetSquareAuthoritiesResponse {
	1: map<string, SquareAuthority> authorities;
}

struct GetSquareAuthorityRequest {
	1: string squareMid;
}

struct GetSquareAuthorityResponse {
	1: SquareAuthority authority;
}

struct GetSquareBotRequest {
	1: string botMid;
}

struct GetSquareBotResponse {
	1: SquareBot squareBot;
}

struct GetSquareCategoriesRequest {
	
}

struct GetSquareCategoriesResponse {
	1: list<Category> categoryList;
}

struct GetSquareChatAnnouncementsRequest {
	2: string squareChatMid;
}

struct GetSquareChatAnnouncementsResponse {
	1: list<SquareChatAnnouncement> announcements;
}

struct GetSquareChatMemberRequest {
	2: string squareMemberMid;
	3: string squareChatMid;
}

struct GetSquareChatMemberResponse {
	1: SquareChatMember squareChatMember;
}

struct GetSquareChatMembersRequest {
	1: string squareChatMid;
	2: string continuationToken;
	3: i32 limit;
}

struct GetSquareChatMembersResponse {
	1: list<SquareMember> squareChatMembers;
	2: string continuationToken;
}

struct GetSquareChatRequest {
	1: string squareChatMid;
}

struct GetSquareChatResponse {
	1: SquareChat squareChat;
	2: SquareChatMember squareChatMember;
	3: SquareChatStatus squareChatStatus;
}

struct GetSquareChatStatusRequest {
	2: string squareChatMid;
}

struct GetSquareChatStatusResponse {
	1: SquareChatStatus chatStatus;
}

struct GetSquareFeatureSetRequest {
	2: string squareMid;
}

struct GetSquareFeatureSetResponse {
	1: SquareFeatureSet squareFeatureSet;
}

struct GetSquareMemberRelationRequest {
	2: string squareMid;
	3: string targetSquareMemberMid;
}

struct GetSquareMemberRelationResponse {
	1: string squareMid;
	2: string targetSquareMemberMid;
	3: SquareMemberRelation relation;
}

struct GetSquareMemberRelationsRequest {
	2: SquareMemberRelationState state;
	3: string continuationToken;
	4: i32 limit;
}

struct GetSquareMemberRelationsResponse {
	1: list<SquareMember> squareMembers;
	2: map<string, SquareMemberRelation> relations;
	3: string continuationToken;
}

struct GetSquareMemberRequest {
	2: string squareMemberMid;
}

struct GetSquareMemberResponse {
	1: SquareMember squareMember;
	2: SquareMemberRelation relation;
	3: string oneOnOneChatMid;
}

struct GetSquareMembersRequest {
	2: set<string> mids;
}

struct GetSquareMembersResponse {
	1: map<string, SquareMember> members;
}

struct GetSquareRequest {
	2: string mid;
}

struct GetSquareResponse {
	1: Square square;
	2: SquareMember myMembership;
	3: SquareAuthority squareAuthority;
	4: SquareStatus squareStatus;
	5: SquareFeatureSet squareFeatureSet;
	6: NoteStatus noteStatus;
}

struct GetSquareStatusRequest {
	2: string squareMid;
}

struct GetSquareStatusResponse {
	1: SquareStatus squareStatus;
}

struct Incentive {
	1: string title;
	2: IncentiveType type;
}

struct InstallAppData {
	1: map<string, string> installData;
}

struct InviteIntoSquareChatRequest {
	1: list<string> inviteeMids;
	2: string squareChatMid;
}

struct InviteIntoSquareChatResponse {
	1: list<string> inviteeMids;
}

struct InviteToSquareRequest {
	2: string squareMid;
	3: list<string> invitees;
	4: string squareChatMid;
}

struct InviteToSquareResponse {
	
}

struct JoinSquareChatRequest {
	1: string squareChatMid;
}

struct JoinSquareChatResponse {
	1: SquareChat squareChat;
	2: SquareChatStatus squareChatStatus;
	3: SquareChatMember squareChatMember;
}

struct JoinSquareRequest {
	2: string squareMid;
	3: SquareMember member;
}

struct JoinSquareResponse {
	1: Square square;
	2: SquareAuthority squareAuthority;
	3: SquareStatus squareStatus;
	4: SquareMember squareMember;
	5: SquareFeatureSet squareFeatureSet;
	6: NoteStatus noteStatus;
}

struct JumpUrlData {
	
}

struct KeywordInfo {
	1: string keyword;
	2: string iconPath;
	3: string label;
	4: bool locationInfoAgreement;
}

struct LeaveSquareChatRequest {
	2: string squareChatMid;
	3: bool sayGoodbye;
	4: i64 squareChatMemberRevision;
}

struct LeaveSquareChatResponse {
	
}

struct LeaveSquareRequest {
	2: string squareMid;
}

struct LeaveSquareResponse {
	
}

struct LiffChatContext {
	1: string chatMid;
}

struct LiffContext {
	1: LiffNoneContext none;
	2: LiffChatContext chat;
	3: LiffSquareChatContext squareChat;
}

struct LiffErrorConsentRequired {
	1: string channelId;
	2: string consentUrl;
}

struct LiffErrorPayload {
	3: LiffErrorConsentRequired consentRequired;
}

struct LiffNoneContext {
	
}

struct LiffSquareChatContext {
	1: string squareChatMid;
}

struct LiffView {
	1: string type;
	2: string url;
	11: bool trustedDomain;
	6: string titleIconUrl;
	4: i32 titleTextColor;
	7: i32 titleSubtextColor;
	8: i32 titleButtonColor;
	5: i32 titleBackgroundColor;
	9: i32 progressBarColor;
	10: i32 progressBackgroundColor;
}

struct LiffViewRequest {
	1: string liffId;
	2: LiffContext context;
}

struct LiffViewResponse {
	1: LiffView view;
	2: string contextToken;
	3: string accessToken;
	4: string featureToken;
	5: list<LiffViewFeatures> features;
	6: string channelId;
}

struct LineCoinInfo {
	1: string balanceAmount;
	2: string historyUrl;
}

struct LinePayAccountInfo {
	1: LinePayAccountInfoAccountType accountType;
	2: string accountId;
	3: string nickname;
	4: LinePayAccountInfoStatus status;
	5: string financialCorporationName;
	6: string realAccountNo;
	7: string currency;
	8: LinePayAccountInfoAccountProductType accountProductType;
	9: string branchName;
	10: bool withdraw;
	11: bool deposit;
	12: string ownerName;
	13: string imageUrl;
	14: bool primary;
	15: string accountProductName;
	16: bool holderNameRegistered;
	17: CardBrand cardBrand;
	18: string debitImageUrl;
	19: bool lineCard;
	20: string lineCardImageId;
	21: string textColor;
	22: string placeholderColor;
	23: string backgroundColor;
	24: set<LinePayAccountInfoExtendedFeatures> extendedFeatures;
}

struct LinePayInfo {
	1: string balanceAmount;
	2: CurrencyProperty currencyProperty;
	3: PayMemberStatus payMemberStatus;
	4: string applicationUrl;
	5: string chargeUrl;
	6: PayMemberGrade payMemberGrade;
}

struct LinePointInfo {
	1: string balanceAmount;
	2: string applicationUrl;
}

struct Location {
	1: string title;
	2: string address;
	3: double latitude;
	4: double longitude;
	5: string phone;
	6: string categoryId;
	7: LocationProvider provider;
	8: GeolocationAccuracy accuracy;
}

struct MarkAsReadRequest {
	2: string squareChatMid;
	4: string messageId;
}

struct MarkAsReadResponse {
	
}

struct Message {
	1: string from_;
	2: string to;
	3: MIDType toType;
	4: string id;
	5: i64 createdTime;
	6: i64 deliveredTime;
	10: string text;
	11: Location location;
	14: bool hasContent;
	15: ContentType contentType;
	17: binary contentPreview;
	18: map<string, string> contentMetadata;
	19: i8 sessionId;
	20: list<binary> chunks;
	21: string relatedMessageId;
	22: MessageRelationType messageRelationType;
	23: i32 readCount;
	24: ServiceCode relatedMessageServiceCode;
}

struct MoneyRange {
	1: string min;
	2: string max;
}

struct MyChatapp {
	1: Chatapp app;
	2: MyChatappPriority category;
	3: i64 priority;
}

struct NoteStatus {
	1: i32 noteCount;
	2: i64 latestCreatedAt;
}

struct Notice {
	1: i32 type;
	2: string notice;
	3: i32 startTime;
	4: i32 endTime;
}

struct NotifyEnteringRequest {
	1: list<string> ticketIds;
}

struct NotifyEnteringResponse {
	1: i64 admissionTime;
}

struct OneTimeKey {
	1: string key;
	2: BarcodeFormat barcodeFormat;
	3: i32 validitySeconds;
	4: string oneTimeKeyFormat;
	5: map<string, string> messages;
}

struct PayAdditionalAgreementEntry {
	1: PayAdditionalAgreementType type;
	2: bool check;
	3: set<string> idList;
}

struct PayAdditionalAgreementGroup {
	1: PayAdditionalAgreementType type;
	2: bool check;
	3: string phrase;
	4: set<PayAdditionalAgreementGroupEntry> values;
}

struct PayAdditionalAgreementGroupEntry {
	1: string id;
	2: PayAdditionalAgreementIconType iconType;
	3: string name;
}

struct PayCouponDetailInfo {
	1: string couponCode;
	2: string name;
	3: string desc;
	4: CouponPaymentItemReward reward;
	5: string imageUrl;
	6: string merchantLinkUrl;
	7: i64 validityStartDate;
	8: i64 validityEndDate;
	9: DisplayMoney discount;
	13: PayCouponStatus status;
}

struct PayCouponSimpleInfo {
	1: string couponCode;
}

struct PayGetMyCouponResponse {
	1: i32 maxSelectableCouponCount;
	2: list<PayCouponDetailInfo> coupons;
}

struct PayIncentiveInfo {
	1: PayIncentiveLevelCode levelCode;
	2: string baseYearMonth;
}

struct PayInvitationInfo {
	1: string invitationId;
	2: PayInvitationType invitationType;
	3: string message;
	4: i64 createDate;
	5: list<PayInvitationUserInfo> receivedInfo;
}

struct PayInvitationUserInfo {
	1: string lineMemberId;
}

struct PayInvoice {
	1: string code;
	2: bool showAlways;
}

struct PayInvoiceSetting {
	1: string regexp;
	2: i32 maxLength;
}

struct PaymentAddressSearchResult {
	1: string state;
	2: string address1;
}

struct PaymentAmount {
	1: string amount;
	2: string amountString;
	3: string currency;
	4: PaymentDiscountedAmount discounted;
}

struct PaymentAmountCalculation {
	1: PaymentAmount productAmount;
	2: PaymentDiscountedAmount balanceAmount;
	3: PaymentDiscountedAmount cardAmount;
	4: map<CardBrand, PaymentDiscountedAmount> cardBrandAmounts;
	5: DisplayMoney point;
	6: map<string, PaymentDiscountedAmount> ownCardAmounts;
	7: string binNo;
	8: PaymentDiscountedAmount cardAmountByBinNo;
	9: list<PaymentUserCouponDiscountAmount> coupons;
	10: map<string, PaymentDiscountedAmount> bankAccountAmounts;
}

struct PaymentAuthenticationInfo {
	1: string authToken;
	2: string confirmMessage;
}

struct PaymentAvailableAuth {
	1: list<PaymentAvailableMethods> methods;
	2: string authToken;
}

struct PaymentCacheableSettings {
	1: map<PaymentCacheableSettingsTimestamps, i64> timestamps;
	2: map<PaymentCacheableSettingsMenus, list<PaymentCountrySettingMenu>> menus;
	3: map<string, PaymentUrlInfo> urls;
	4: map<PaymentCacheableSettingsUrlGroups, list<string>> urlGroups;
	5: map<PaymentCacheableSettingsTosUrlBundles, list<PaymentTosUrlBundle>> tosUrlBundles;
	6: list<PaymentCardValidationRule> cardValidationRules;
	7: map<PaymentCacheableSettingsMessages, map<string, string>> messages;
	8: PaymentMyCode myCode;
	9: PayInvoiceSetting invoice;
	10: map<PaymentCacheableSettingsFeatures, map<string, string>> features;
}

struct PaymentCancellationInfo {
	1: TransactionType transactionType;
	3: i64 cancelDate;
	4: DisplayMoney cancelAmount;
	5: DisplayMoney remainAmount;
}

struct PaymentCardValidationRule {
	2: string regex;
	3: string grouping;
	4: i32 maxLength;
	5: string cardBrandName;
	6: string securityCodeHelp;
	7: CardBrand cardBrand;
}

struct PaymentCountrySettingFeature {
	1: bool deposit;
	2: bool withdraw;
	3: bool transfer;
	4: bool transferRequest;
	5: bool dutch;
	6: bool payment;
}

struct PaymentCountrySettingInfo {
	1: bool balanceSupport;
	2: PaymentCountrySettingBalanceType balanceType;
	3: string bankAccountRegistrationUrl;
	4: bool creditcardSupport;
	5: bool crossBorderTransfer;
	6: PaymentCountrySettingFeature features;
	8: list<PaymentCountrySettingDepositMethods> depositMethods;
	9: PaymentCountrySettingUrlInfo urls;
	10: string cybsMerchantId;
	11: string cybsOrgId;
	12: string cybsServerUrl;
	13: i32 asyncWaitTimeout;
	15: PaymentCountrySettingAddressSearchType addressSearchType;
	14: list<PaymentCountrySettingMenu> menu;
	16: bool paygEnabled;
}

struct PaymentCountrySettingInfoEx {
	1: bool balanceSupport;
	2: PaymentCountrySettingBalanceType balanceType; 
	3: i32 asyncWaitTimeout;
	4: bool creditcardSupport;
	5: PaymentCybsInfo cybs;
	6: bool crossBorderTransfer;
	7: PaymentCountrySettingAddressSearchType addressSearchType;
	8: list<PaymentCountrySettingMenu> menu;
	9: list<PaymentCountrySettingDepositMethods> depositMethods;
	10: map<string, PaymentUrlInfo> urls;
	11: map<PaymentCacheableSettingsUrlGroups, list<string>> urlGroups;
	12: bool paygEnabled;
	13: PaymentCountrySettingLimitInfo limit;
	14: bool emailRequired;
	15: map<PaymentCacheableSettingsTosUrlBundles, list<PaymentTosUrlBundle>> tosUrlBundles;
	16: PaymentCountrySettingRegistrationType registrationType;
	17: bool pointSupport;
	18: string registrationUrl;
	19: string introUrl;
	20: bool touchIdMenuAvailable;
	21: bool myCodePasswordRequired;
	22: map<PaymentCountrySettingWithdrawStaticMenu, list<PayWithdrawStaticMenu>> settingWithdrawStaticMenu;
}

struct PaymentCountrySettingLimitInfo {
	1: i32 depositBank;
	2: i32 withdrawalBank;
	3: i32 possessionOfCards;
}

struct PaymentCountrySettingMenu {
	16: i64 id;
	1: PaymentCountrySettingMenuType type;
	2: i32 order;
	3: string imgUrl;
	4: string touchImgUrl;
	5: string linkUrl;
	6: string name;
	7: PaymentCountrySettingMenuLinkType linkType;
	8: PaymentCountrySettingMenuBadgeType badgeType;
	9: string androidImageUrl;
	10: string iosImageUrl;
	11: string androidLinkUrl;
	12: string androidPackageName;
	13: string iosLinkUrl;
	14: string androidStoreUrl;
	15: string iosStoreUrl;
	17: i64 sequence;
	18: PaymentCountrySettingMenuDisplayType displayType;
}

struct PaymentCountrySettingUrlInfo {
	1: map<PaymentCountrySettingTos, PaymentTermInfo> tos;
	2: string basicPolicyOnAntiSocialForces;
	3: string error;
	4: string convenienceStoreChargingHelp;
	5: string atmChargingHelp;
	6: string linePayHelp;
	7: list<string> paymentUrlPrefixes;
}

struct PaymentCybsInfo {
	1: string merchantId;
	2: string orgId;
	3: string serverUrl;
}

struct PaymentDetailInfo {
	1: string transactionId;
	2: i64 transactionDate;
	3: TransactionType transactionType;
	4: string productName;
	6: CompositePaymentItemMethod paymethod;
	7: string cardCorporation;
	8: string maskedCardNumber;
	9: string merchantName;
	10: string merchantTelNo;
	11: string merchantRepresentative;
	12: PaymentCancellationInfo cancelList;
	13: DisplayMoney moneyAmount;
	14: string accountNickname;
	15: string merchantEmail;
	16: i64 confirmDate;
	17: string merchantLabel;
}

struct PaymentDiscountedAmount {
	1: string amount;
	2: string amountString;
	3: string currency;
	4: string discount;
	5: string discountString;
}

struct PaymentEligibleFriendStatus {
	1: string mid;
	2: PaymentEligibleFriendStatusType status;
}

struct PaymentFlowTypeCustom {
	1: string view;
	2: PaymentFlowTypeCustomElement elements;
}

struct PaymentFlowTypeCustomElement {
	1: string id;
	2: string value;
	3: string style;
	4: string regularExpression;
	5: bool visible;
	6: string uri;
}

struct PaymentFlowTypeInfo {
	1: PaymentFlowType flowType;
	2: PaymentFlowAuthType authType;
	3: PaymentFlowHandleableOps handleableOps;
	4: list<PaymentFlowTypeCustom> customs;
}

struct PaymentGetResponse {
	1: PaymentUserInfo user;
	2: PaymentCountrySettingInfo countrySetting;
	3: TransactionSetupInfo setupInfo;
	4: bool hasAccount;
	5: BalanceInfo balance;
	6: list<LinePayAccountInfo> cardAccounts;
	7: list<LinePayAccountInfo> bankAccounts;
	8: list<PaymentTransactionHistoryInfo> transactionHistory;
	9: list<TransactionInfo> transactions;
	10: list<LinePayAccountInfo> lineAccounts;
	11: bool hasDepositAccount;
	12: list<CardBrandInfo> cardBrands;
	13: list<PaymentCardValidationRule> cardValidations;
	14: PaymentCanUnregister canUnregister;
	15: string requestToken;
	16: map<string, string> messagesAuthMethodSelection;
	17: PaymentCountrySettingInfo countrySettingV2;
	18: PaymentCountrySettingInfo countrySettingV3;
	19: map<TransactionInputConditions, PaymentFlowTypeInfo> flowTypeInfos;
	20: PaymentCountrySettingInfoEx countrySettingV4;
	21: PaymentUserInfoEx userEx;
	22: list<CompositePaymentItemMethod> availablePaymentMethodsOtk;
	23: PaymentMethodOneTimeKey currentPaymentMethodOtk;
}

struct PaymentInputCondition {
	1: list<string> unitAmounts;
	2: string minimumUnit;
}

struct PaymentLineCardInfo {
	1: string designCode;
	2: string imageUrl;
}

struct PaymentLineCardIssueForm {
	1: PaymentCacheableSettingsTosUrlBundles requiredTermsOfServiceBundle;
	2: list<PaymentLineCardInfo> availableLineCards;
}

struct PaymentMessageCommand {
	1: string message;
	2: map<string, string> messageMetadata;
	3: string imageObsPath;
}

struct PaymentMethodOneTimeKey {
	1: CompositePaymentItemMethod paymethod;
	2: string balanceString;
	3: string maskedCardNumber;
	4: string financialCorporationName;
	5: string lpAccountNo;
	6: CardBrand cardBrand;
	7: bool displayPointArea;
	8: bool usePoint;
	9: DisplayMoney point;
	10: bool displayCouponArea;
}

struct PaymentMyCode {
	1: string shortcutUrl;
	2: string shortcutIconUrl;
	3: string shortcutIconText;
	4: string shortcutSchemeUrl;
}

struct PaymentMyCodeSetting {
	1: bool passwordRequired;
	2: bool displayPointArea;
	3: bool usePoint;
}

struct PaymentPointInfo {
	1: DisplayMoney point;
	2: bool needInquiry;
}

struct PaymentRegionalInfo {
	1: ThRegionalInfo th;
}

struct PaymentRequestAuthButtonText {
	1: string continueLabel;
	2: string cancelLabel;
}

struct PaymentRequestAuthInfo {
	1: string productName;
	2: string merchantName;
	3: DisplayMoney product;
	4: DisplayMoney payment;
	5: LinePayAccountInfoAccountType paymethod;
	6: string accountNickname;
	7: string cardCorporation;
	8: string maskedCardNumber;
	9: string confirmUrl;
	10: string message;
	11: string detailMessage;
	12: string packageName;
	13: PaymentContinueAction continueAction;
	14: string continueAlertMessage;
	15: string cancelUrl;
	16: PaymentRequestAuthButtonText buttonText;
	17: CompositePaymentItemMethod primaryPaymentMethod;
	18: PaymentAmount productAmount;
	19: map<CompositePaymentItemMethod, PaymentDiscountedAmount> payments;
	20: DisplayMoney accumulation;
	21: DisplayMoney coupon;
	22: string financeCorporationName;
	23: string maskedRealAccountNumber;
	24: string merchantIpassId;
}

struct PaymentRequestCaution {
	1: string helpLink;
	2: string message;
}

struct PaymentRequestInfo {
	1: string transactionReserveId;
	2: string productName;
	4: string productImageUrl;
	8: string cancelUrl;
	10: string merchantName;
	12: DisplayMoney product;
	13: DisplayMoney card;
	14: DisplayMoney balance;
	15: i64 expireDate;
	16: list<CompositePaymentItemMethod> paymentMethods;
	17: string packageName;
	18: PaymentViewType viewType;
	19: string buttonText;
	20: PaymentRequestFlowType flowType;
	21: string confirmUrl;
	22: string merchantNote;
	23: string promotionPhrase;
	24: PaymentContinueAction continueAction;
	25: list<CardBrand> payCardBrands;
	26: DisplayMoney oneTime;
	27: map<CardBrand, DisplayMoney> cardBrands;
	28: PaymentRequestPromotion promotion;
	29: PaymentAmountCalculation amountInfo;
	30: map<CompositePaymentItemMethod, string> accumulationPhrases;
	31: list<string> agreedTos;
	32: bool existExtraDiscount;
	33: PayAdditionalAgreementGroup additionalAgreements;
	34: bool displayCouponArea;
	35: PaymentRequestCaution caution;
	36: string extra;
}

struct PaymentRequestPromotion {
	1: string promotionPhrase;
	2: string balancePromotionPhrase;
	3: map<CardBrand, string> cardPromotionPhrases;
	4: PaymentRequestPromotionBanner banner;
	5: map<string, string> ownCardPromotionPhrases;
	6: map<string, string> bankAccountPromotionPhrases;
}

struct PaymentRequestPromotionBanner {
	1: string icon;
	2: string message;
	3: string url;
}

struct PaymentRequiredAgreementsInfo {
	1: string title;
	2: string desc;
	3: string linkName;
	4: string linkUrl;
	5: list<string> newAgreements;
}

struct PaymentRSA {
	1: string keyName;
	2: string nValue;
	3: string eValue;
}

struct PaymentSettingsMenuInfo {
	1: string certificationStatus;
	2: string memberGradeType;
	3: bool recieveMoneyEnabled;
	4: list<PaymentSettingsMenuInfoAccount> accounts;
	5: string bankAccountSettingUrl;
	6: bool lineCardUser;
}

struct PaymentStoredCreditCardInfo {
	1: string suffixCardNumber;
	2: string maskedCardNumber;
	3: string maskedExpiry;
	4: CardBrand cardBrand;
	5: i64 storedCreditCardAgreementSeq;
	6: string binNo;
}

struct PaymentSettingsMenuInfoAccount {
	1: string financialCorporationName;
	2: string accountNo;
	4: string imageUrl;
}

struct PaymentTermInfo {
	1: string url;
	2: bool mustScroll;
}

struct PaymentTosUrlBundle {
	1: list<string> urls;
	2: string prefixText;
}

struct PaymentTradeInfo {
	1: string chargeRequestId;
	2: PaymentListTradeNumbersType chargeRequestType;
	3: i64 chargeRequestYmdt;
	4: string tradeNumber;
	7: string agencyNo;
	8: string confirmNo;
	9: i64 expireYmd;
	10: DisplayMoney moneyAmount;
	11: i64 completeYmdt;
	12: string paymentProcessCorp;
	13: PaymentListTradeNumbersStatus status;
	14: string helpUrl;
	15: string guideMessage;
}

struct PaymentTransactionHistoryInfo {
	1: string message;
	2: PaymentTransactionHistoryType type;
	3: i64 createdDate;
	4: PaymentTransactionHistoryDestination destination;
}

struct PaymentTransferRequest {
	1: string amount;
	2: string receivedLineMemberId;
}

struct PaymentTransferTargetInfo {
	1: string name;
	2: string accountNo;
	3: string referenceNo;
	4: string lineMemberId;
}

struct PaymentTTSPinCodeVerificationInfo {
	1: bool authPasswordRequired;
	2: string message;
}

struct PaymentUrlInfo {
	1: string url;
	2: bool mustScroll;
	3: string pageTitle;
	4: string label;
	5: string labelJoin;
	6: bool acceptanceRequired;
	7: string labelDesc;
}

struct PaymentUserAgreementInfo {
	1: bool agreed;
	2: list<TransactionInputConditions> featureTypes;
}

struct PaymentUserCouponDiscountAmount {
	1: string couponCode;
	2: string displayText;
	3: DisplayMoney discount;
}

struct PaymentUserInfo {
	1: string paymentUserId;
	2: string mid;
	3: PaymentUserStatus status;
	4: string country;
	5: string currency;
	6: i64 subscribedDate;
	7: i64 suspendedDate;
	8: i64 suspensionCanceledDate;
	9: i64 lastupdatedDate;
	10: PaymentCountrySettingWithdrawStaticMenu grade;
	11: PaymentUserIdentification identification;
	12: map<PaymentCountrySettingTos, bool> agreement;
	13: string email;
	14: bool notification;
	17: string phone;
	19: bool passwordCert;
	20: PaymentUserDetailStatus detailStatus;
	21: bool balanceNotification;
	22: DisplayMoney minimumBalance;
	23: string firstName;
	24: string lastName;
	25: string phoneticFirstName;
	26: string phoneticLastName;
	27: string postalCode;
	28: string state;
	29: string address1;
	30: string address2;
}

struct PaymentUserInfoDigest {
	1: string userId;
	2: PaymentUserStatus status;
	3: string country;
	4: PaymentCountrySettingWithdrawStaticMenu grade;
	5: PaymentUserPasswordVersion passwordVersion;
	6: bool joined;
}

struct PaymentUserInfoEx {
	1: string paymentUserId;
	2: string mid;
	3: PaymentUserStatus status;
	4: string country;
	5: string currency;
	6: i64 subscribedDate;
	7: i64 suspendedDate;
	8: i64 suspensionCanceledDate;
	9: i64 lastupdatedDate;
	10: PaymentCountrySettingWithdrawStaticMenu grade;
	11: PaymentUserIdentification identification;
	12: map<string, bool> agreement;
	13: string email;
	14: bool notification;
	17: string phone;
	19: bool passwordCert;
	20: PaymentUserDetailStatus detailStatus;
	21: bool balanceNotification;
	22: DisplayMoney minimumBalance;
	23: string firstName;
	24: string lastName;
	25: string phoneticFirstName;
	26: string phoneticLastName;
	27: string postalCode;
	28: string state;
	29: string address1;
	30: string address2;
	31: PaymentUserIntro intro;
	32: string referenceNo;
	33: list<PaymentCountrySettingMenuType> unavailableMenuItems;
	34: string identificationNo;
	35: string lineCardNo;
	36: string introUrl;
	37: PaymentUserPasswordVersion passwordVersion;
	38: bool myCodePasswordRequired;
	39: PaymentMyCodeSetting myCodeSetting;
	40: map<string, PaymentUserAgreementInfo> agreements;
	41: bool invoiceDisplay;
	42: PayInvoice invoice;
	43: PayIncentiveInfo incentive;
}

struct PayRefreshOneTimeKeyResponse {
	1: list<PayCouponSimpleInfo> coupons;
}

struct PayStatusInfo {
	1: PayStatus status;
}

struct PayWithdrawStaticMenu {
	1: string title;
	2: string urlKey;
	3: string imageUrl;
}

struct ProductProperty {
	1: StickerProperty stickerProperty;
	2: ThemeProperty themeProperty;
	3: SticonProperty sticonProperty;
}

struct ProductSearchSummary {
	1: string id;
	2: ProductSearchSummaryType type;
	3: string name;
	4: string author;
	5: PromotionInfo promotionInfo;
	6: i64 version;
	7: bool newFlag;
	8: i32 priceTier;
	9: string priceInLineCoin;
	10: ProductProperty property;
	11: ProductSearchSummarySubType subType;
	12: bool onSale;
	13: bool availableForPresent;
	14: bool availableForPurchase;
	15: i32 validDays;
	16: string authorId;
	17: bool bargainFlag;
}

struct Promotion {
	1: string title;
	2: string oaMid;
	3: string accountName;
	4: string linkUrl;
	5: list<PromotionIcons> icons;
	6: Incentive primaryIncentive;
	7: string profileImageUrl;
}

struct PromotionBuddyInfo {
	1: string buddyMid;
}

struct PromotionDetail {
	1: PromotionBuddyInfo promotionBuddyInfo;
	2: PromotionInstallInfo promotionInstallInfo;
	3: PromotionMissionInfo promotionMissionInfo;
}

struct PromotionInfo {
	1: PromotionInfoType promotionType;
	51: PromotionBuddyInfo buddyInfo;
	2: PromotionDetail promotionDetail;
}

struct PromotionInstallInfo {
	1: string downloadUrl;
	2: string customUrlSchema;
}

struct PromotionMissionInfo {
	1: PromotionMissionType promotionMissionType;
	2: bool missionCompleted;
	3: string downloadUrl;
	4: string customUrlSchema;
}

struct RefreshSubscriptionsRequest {
	2: list<i64> subscriptions;
}

struct RefreshSubscriptionsResponse {
	1: i64 ttlMillis;
	2: map<i64, SubscriptionState> subscriptionStates;
}

struct RejectSquareMembersRequest {
	2: string squareMid;
	3: list<string> requestedMemberMids;
}

struct RejectSquareMembersResponse {
	1: list<SquareMember> rejectedMembers;
	2: SquareStatus status;
}

struct RemoveSubscriptionsRequest {
	2: list<i64> unsubscriptions;
}

struct RemoveSubscriptionsResponse {
	
}

struct ReportSquareChatRequest {
	2: string squareMid;
	3: string squareChatMid;
	5: ReportType reportType;
	6: string otherReason;
}

struct ReportSquareChatResponse {
	
}

struct ReportSquareMemberRequest {
	2: string squareMemberMid;
	3: ReportType reportType;
	4: string otherReason;
	5: string squareChatMid;
}

struct ReportSquareMemberResponse {
	
}

struct ReportSquareMessageRequest {
	2: string squareMid;
	3: string squareChatMid;
	4: string squareMessageId;
	5: ReportType reportType;
	6: string otherReason;
}

struct ReportSquareMessageResponse {
	
}

struct ReportSquareRequest {
	2: string squareMid;
	3: ReportType reportType;
	4: string otherReason;
}

struct ReportSquareResponse {
	
}

struct Reservation {
	1: string reservationNumber;
	2: i32 offlineEnabled;
	3: string eventTitle;
	4: string eventVenue;
	5: string artistName;
	6: string eventImgUrl;
	7: i64 startDate;
	8: i64 startTime;
	9: i64 doorTime;
	10: i64 enableDoorTime;
	11: i64 validLimitTime;
	12: i64 deletableTime;
	13: TicketEntryCheckMethod entryCheckMethod;
	14: string eventDesc;
	15: string commEventDesc;
	16: UIInfo uiInfo;
	17: list<Tickets> tickets;
	18: Admission admission;
}

struct ReturnTicketRequest {
	1: string reservationNumber;
}

struct ReturnTicketResponse {
	1: i64 returnTicketTime;
}

struct RevokeTokenRequest {
	1: string accessToken;
}

struct RSAEncryptedLoginInfo {
	1: string loginId;
	2: string loginPassword;
}

struct RSAEncryptedPassword {
	1: string encrypted;
	2: string keyName;
}

struct SearchCommonParameter {
	1: double latitude;
	2: double longitude;
	3: string source;
	4: string region;
	5: string sid;
	6: i32 queryType;
}

struct SearchItemUnion {
	1: CategoryItem categoryItem;
	2: SpotItem spotItem;
	3: ProductSearchSummary productItem;
	4: ServiceItem serviceItem;
	5: YellowpageItem yellowpageItem;
	6: BuddySearchResult oaItem;
	7: GeoAddressItem geoAddressItem;
	8: ShortcutItem shortcutItem;
	9: SquareInfo squareItem;
	10: Category squareCategoryItem;
}

struct SearchPagingParameter {
	1: i32 collection;
	2: i32 start;
	3: i32 length;
	4: SearchCommonParameter commonParam;
}

struct SearchResult {
	1: string sid;
	2: list<SearchResultCollection> collections;
	3: i32 start;
	4: i32 length;
}

struct SearchResultCollection {
	1: i32 collection;
	2: string title;
	3: i32 rank;
	4: i32 hits;
	5: list<SearchResultItem> items;
	6: bool hasNext;
	7: list<i32> categoryId;
	8: string error;
	9: string tabTitle;
	10: i32 start;
	11: i32 length;
	12: i32 squareCategoryId;
}

struct SearchResultItem {
	1: string id;
	2: i32 type;
	3: SearchItemUnion item;
	4: string title;
	5: string sub1;
	6: string sub2;
	7: string iconUrl;
	8: string titleLink;
	9: string iconLink;
	10: string displayTemplate;
	11: list<AdditionalInfoItem> additionalInfo;
}

struct SearchSection {
	1: i32 type;
	2: string title;
	3: KeywordInfo keywordInfos;
}

struct SearchSquareChatMembersRequest {
	1: string squareChatMid;
	2: SquareChatMemberSearchOption searchOption;
	3: string continuationToken;
	4: i32 limit;
}

struct SearchSquareChatMembersResponse {
	1: list<SquareMember> members;
	2: string continuationToken;
}

struct SearchSquareMembersRequest {
	2: string squareMid;
	3: SquareChatMemberSearchOption searchOption;
	4: string continuationToken;
	5: i32 limit;
}

struct SearchSquareMembersResponse {
	1: list<SquareMember> members;
	2: i64 revision;
	3: string continuationToken;
	4: i32 totalCount;
}

struct SearchSquaresRequest {
	2: string query;
	3: string continuationToken;
	4: i32 limit;
}

struct SearchSquaresResponse {
	1: list<Square> squares;
	2: map<string, SquareStatus> squareStatuses;
	3: map<string, SquareMember> myMemberships;
	4: string continuationToken;
	5: map<string, NoteStatus> noteStatuses;
}

struct SendMessageRequest {
	1: i32 reqSeq;
	2: string squareChatMid;
	3: SquareMessage squareMessage;
}

struct SendMessageResponse {
	1: SquareMessage createdSquareMessage;
}

struct ServiceItem {
	1: string id;
	2: string title;
	3: i32 type;
	4: i32 subType;
	5: string appId;
	6: string channelId;
	7: string badge;
	8: string iconUrl;
	9: string downloadUrl;
	10: string launchScheme;
	11: bool iconTint;
}

struct ShortcutButton {
	1: string id;
	2: string title;
	3: string url;
	4: string iconPath;
	5: ShortcutButtonAction action;
}

struct ShortcutButtonAction {
	1: i32 actionType;
	2: ButtonActionData actionData;
}

struct ShortcutItem {
	1: string id;
	2: string title;
	3: string descr;
	4: string iconPath;
	5: string url;
	6: list<ShortcutButton> buttons;
	7: ShortcutButtonAction action;
}

struct Square {
	1: string mid;
	2: string name;
	3: string welcomeMessage;
	4: string profileImageObsHash;
	5: string desc;
	6: bool searchable;
	7: SquareType type;
	8: i32 categoryId;
	9: string invitationURL;
	10: i64 revision;
	11: bool ableToUseInvitationTicket;
	12: SquareChatState state;
}

struct SquareAuthority {
	1: string squareMid;
	2: SquareMemberRole updateSquareProfile;
	3: SquareMemberRole inviteNewMember;
	4: SquareMemberRole approveJoinRequest;
	5: SquareMemberRole createPost;
	6: SquareMemberRole createOpenSquareChat;
	7: SquareMemberRole deleteSquareChatOrPost;
	8: SquareMemberRole removeSquareMember;
	9: SquareMemberRole grantRole;
	10: SquareMemberRole enableInvitationTicket;
	11: i64 revision;
	12: SquareMemberRole createSquareChatAnnouncement;
	13: SquareMemberRole updateMaxChatMemberCount;
}

struct SquareBot {
	1: string botMid;
	2: bool active;
	3: string displayName;
	4: string profileImageObsHash;
	5: i32 iconType;
	6: i64 lastModifiedAt;
	7: i64 expiredIn;
}

struct SquareChat {
	1: string squareChatMid;
	2: string squareMid;
	3: SquareChatType type;
	4: string name;
	5: string chatImageObsHash;
	6: i64 squareChatRevision;
	7: i32 maxMemberCount;
	8: SquareChatState state;
}

struct SquareChatAnnouncement {
	1: i64 announcementSeq;
	2: SquareChatAnnouncementType type;
	3: SquareChatAnnouncementContents contents;
}

struct SquareChatAnnouncementContents {
	1: TextMessageAnnouncementContents textMessageAnnouncementContents;
}

struct SquareChatMember {
	1: string squareMemberMid;
	2: string squareChatMid;
	3: i64 revision;
	4: SquareChatMembershipState membershipState;
	5: bool notificationForMessage;
}

struct SquareChatMemberSearchOption {
	1: string displayName;
}

struct SquareChatStatus {
	3: SquareMessage lastMessage;
	4: string senderDisplayName;
	5: SquareChatStatusWithoutMessage otherStatus;
}

struct SquareChatStatusWithoutMessage {
	1: i32 memberCount;
	2: i32 unreadMessageCount;
	3: string markedAsReadMessageId;
	4: string mentionedMessageId;
	5: NotifiedMessageType notifiedMessageType;
}

struct SquareEvent {
	2: i64 createdTime;
	3: SquareEventType type;
	4: SquareEventPayload payload;
	5: string syncToken;
	6: SquareEventStatus eventStatus;
}

struct SquareEventPayload {
	1: SquareEventReceiveMessage receiveMessage;
	2: SquareEventSendMessage sendMessage;
	3: SquareEventNotifiedJoinSquareChat notifiedJoinSquareChat;
	4: SquareEventNotifiedInviteIntoSquareChat notifiedInviteIntoSquareChat;
	5: SquareEventNotifiedLeaveSquareChat notifiedLeaveSquareChat;
	6: SquareEventNotifiedDestroyMessage notifiedDestroyMessage;
	7: SquareEventNotifiedMarkAsRead notifiedMarkAsRead;
	8: SquareEventNotifiedUpdateSquareMemberProfile notifiedUpdateSquareMemberProfile;
	9: SquareEventNotifiedUpdateSquare notifiedUpdateSquare;
	10: SquareEventNotifiedUpdateSquareMember notifiedUpdateSquareMember;
	11: SquareEventNotifiedUpdateSquareChat notifiedUpdateSquareChat;
	12: SquareEventNotifiedUpdateSquareChatMember notifiedUpdateSquareChatMember;
	13: SquareEventNotifiedUpdateSquareAuthority notifiedUpdateSquareAuthority;
	14: SquareEventNotifiedUpdateSquareStatus notifiedUpdateSquareStatus;
	15: SquareEventNotifiedUpdateSquareChatStatus notifiedUpdateSquareChatStatus;
	16: SquareEventNotifiedCreateSquareMember notifiedCreateSquareMember;
	17: SquareEventNotifiedCreateSquareChatMember notifiedCreateSquareChatMember;
	18: SquareEventNotifiedUpdateSquareMemberRelation notifiedUpdateSquareMemberRelation; 
	19: SquareEventNotifiedShutdownSquare notifiedShutdownSquare;
	20: SquareEventNotifiedKickoutFromSquare notifiedKickoutFromSquare;
	21: SquareEventNotifiedDeleteSquareChat notifiedDeleteSquareChat;
	22: SquareEventNotificationJoinRequest notificationJoinRequest;
	23: SquareEventNotificationMemberUpdate notificationJoined;
	24: SquareEventNotificationMemberUpdate notificationPromoteCoadmin;
	25: SquareEventNotificationMemberUpdate notificationPromoteAdmin;
	26: SquareEventNotificationMemberUpdate notificationDemoteMember;
	27: SquareEventNotificationMemberUpdate notificationKickedOut;
	28: SquareEventNotificationSquareDelete notificationSquareDelete;
	29: SquareEventNotificationSquareChatDelete notificationSquareChatDelete;
	30: SquareEventNotificationMessage notificationMessage;
	31: SquareEventNotifiedUpdateSquareChatProfileName notifiedUpdateSquareChatProfileName;
	32: SquareEventNotifiedUpdateSquareChatProfileImage notifiedUpdateSquareChatProfileImage;
	33: SquareEventNotifiedUpdateSquareFeatureSet notifiedUpdateSquareFeatureSet;
	34: SquareEventNotifiedAddBot notifiedAddBot;
	35: SquareEventNotifiedRemoveBot notifiedRemoveBot;
	36: SquareEventNotifiedUpdateSquareNoteStatus notifiedUpdateSquareNoteStatus;
	37: SquareEventNotifiedUpdateSquareChatAnnouncement notifiedUpdateSquareChatAnnouncement;
	38: SquareEventNotifiedUpdateSquareChatMaxMemberCount notifiedUpdateSquareChatMaxMemberCount;
}

struct SquareEventNotificationJoinRequest {
	1: string squareMid;
	2: string squareName;
	3: string requestMemberName;
	4: string profileImageObsHash;
}

struct SquareEventNotificationMemberUpdate {
	1: string squareMid;
	2: string squareName;
	3: string profileImageObsHash;
}

struct SquareEventNotificationMessage {
	1: string squareChatMid;
	2: SquareMessage squareMessage;
	3: string senderDisplayName;
	4: i32 unreadCount;
	5: bool requiredToFetchChatEvents;
	6: string mentionedMessageId;
	7: NotifiedMessageType notifiedMessageType;
}

struct SquareEventNotificationSquareChatDelete {
	1: string squareChatMid;
	2: string squareChatName;
	3: string profileImageObsHash;
}

struct SquareEventNotificationSquareDelete {
	1: string squareMid;
	2: string squareName;
	3: string profileImageObsHash;
}

struct SquareEventNotifiedAddBot {
	1: string squareChatMid;
	2: SquareMember squareMember;
	3: string botMid;
	4: string botDisplayName;
}

struct SquareEventNotifiedRemoveBot {
	1: string squareChatMid;
	2: SquareMember squareMember;
	3: string botMid;
	4: string botDisplayName;
}

struct SquareEventNotifiedCreateSquareMember {
	1: Square square;
	2: SquareAuthority squareAuthority;
	3: SquareStatus squareStatus;
	4: SquareMember squareMember;
	5: SquareFeatureSet squareFeatureSet;
	6: NoteStatus noteStatus;
}

struct SquareEventNotifiedCreateSquareChatMember {
	1: SquareChat chat;
	2: SquareChatStatus chatStatus;
	3: SquareChatMember chatMember;
	4: i64 joinedAt;
	5: SquareMember peerSquareMember;
}

struct SquareEventNotifiedDeleteSquareChat {
	1: SquareChat squareChat;
}

struct SquareEventNotifiedDestroyMessage {
	1: string squareChatMid;
	3: string messageId;
}

struct SquareEventNotifiedInviteIntoSquareChat {
	1: string squareChatMid;
	2: list<SquareMember> invitees;
	3: SquareMember invitor;
	4: SquareMemberRelation invitorRelation;
}

struct SquareEventNotifiedJoinSquareChat {
	1: string squareChatMid;
	2: SquareMember joinedMember;
}

struct SquareEventNotifiedKickoutFromSquare {
	1: string squareChatMid;
	2: list<SquareMember> kickees;
}

struct SquareEventNotifiedLeaveSquareChat {
	1: string squareChatMid;
	2: string squareMemberMid;
	3: bool sayGoodbye;
	4: SquareMember squareMember;
}

struct SquareEventNotifiedMarkAsRead {
	1: string squareChatMid;
	2: string sMemberMid;
	4: string messageId;
}

struct SquareEventNotifiedShutdownSquare {
	1: string squareChatMid;
	2: Square square;
}

struct SquareEventNotifiedUpdateSquare {
	1: string squareMid;
	2: Square square;
}

struct SquareEventNotifiedUpdateSquareAuthority {
	1: string squareMid;
	2: SquareAuthority squareAuthority;
}

struct SquareEventNotifiedUpdateSquareChat {
	1: string squareMid;
	2: string squareChatMid;
	3: SquareChat squareChat;
}

struct SquareEventNotifiedUpdateSquareChatAnnouncement {
	1: string squareChatMid;
	2: i64 announcementSeq;
}

struct SquareEventNotifiedUpdateSquareChatMaxMemberCount {
	1: string squareChatMid;
	2: i32 maxMemberCount;
	3: SquareMember editor;
}

struct SquareEventNotifiedUpdateSquareChatMember {
	1: string squareChatMid;
	2: string squareMemberMid;
	3: SquareChatMember squareChatMember;
}

struct SquareEventNotifiedUpdateSquareChatProfileImage {
	1: string squareChatMid;
	2: SquareMember editor;
}

struct SquareEventNotifiedUpdateSquareChatProfileName {
	1: string squareChatMid;
	2: SquareMember editor;
	3: string updatedChatName;
}

struct SquareEventNotifiedUpdateSquareChatStatus {
	1: string squareChatMid;
	2: SquareChatStatusWithoutMessage statusWithoutMessage;
}

struct SquareEventNotifiedUpdateSquareFeatureSet {
	1: SquareFeatureSet squareFeatureSet;
}

struct SquareEventNotifiedUpdateSquareMember {
	1: string squareMid;
	2: string squareMemberMid;
	3: SquareMember squareMember;
}

struct SquareEventNotifiedUpdateSquareMemberProfile {
	1: string squareChatMid;
	2: SquareMember squareMember;
}

struct SquareEventNotifiedUpdateSquareMemberRelation {
	1: string squareMid;
	2: string myMemberMid;
	3: string targetSquareMemberMid;
	4: SquareMemberRelation squareMemberRelation;
}

struct SquareEventNotifiedUpdateSquareNoteStatus {
	1: string squareMid;
	2: NoteStatus noteStatus;
}

struct SquareEventNotifiedUpdateSquareStatus {
	1: string squareMid;
	2: SquareStatus squareStatus;
}

struct SquareEventReceiveMessage {
	1: string squareChatMid;
	2: SquareMessage squareMessage;
}

struct SquareEventSendMessage {
	1: string squareChatMid;
	2: SquareMessage squareMessage;
	3: i32 reqSeq;
}

struct SquareFeature {
	1: SquareFeatureControlState controlState;
	2: BooleanState booleanValue;
}

struct SquareFeatureSet {
	1: string squareMid;
	2: i32 revision;
	11: SquareFeature creatingSecretSquareChat;
	12: SquareFeature invitingIntoOpenSquareChat;
}

struct SquareInfo {
	1: Square square;
	2: SquareStatus squareStatus;
	3: NoteStatus squareNoteStatus;
}

struct SquareMember {
	1: string squareMemberMid;
	2: string squareMid;
	3: string displayName;
	4: string profileImageObsHash;
	5: bool ableToReceiveMessage;
	7: SquareMembershipState membershipState;
	8: SquareMemberRole role;
	9: i64 revision;
	10: SquarePreference preference;
	11: string joinMessage;
}

struct SquareMemberRelation {
	1: SquareMemberRelationState state;
	2: i64 revision;
}

struct SquareMessage {
	1: Message message;
	3: MIDType fromType;
	4: i64 squareMessageRevision;
}

struct SquarePreference {
	1: i64 favoriteTimestamp;
	2: bool notiForNewJoinRequest;
}

struct SquareStatus {
	1: i32 memberCount;
	2: i32 joinRequestCount;
	3: i64 lastJoinRequestAt;
	4: i32 openChatCount;
}

struct SpotItem {
	2: string name;
	3: string phone;
	4: SpotItemCategory category;
	5: string mid;
	6: string countryAreaCode;
	10: bool freePhoneCallable;
}

struct StickerProperty {
	1: bool hasAnimation;
	2: bool hasSound;
	3: bool hasPopup;
	4: StickerResourceType stickerResourceType;
	5: string stickerOptions;
	6: i32 compactStickerOptions;
	7: string stickerHash;
	9: list<string> stickerIds;
}

struct SticonProperty {
	2: list<string> sticonIds;
}

struct SubscriptionNotification {
	1: i64 subscriptionId;
}

struct SubscriptionState {
	1: i64 subscriptionId;
	2: i64 ttlMillis;
}

struct TextMessageAnnouncementContents {
	1: string messageId;
	2: string text;
	3: string senderSquareMemberMid;
	4: i64 createdAt;
}

struct ThemeProperty {
	1: string thumbnailUrl;
	2: ThemeResourceType themeResourceType;
}

struct ThingsDevice {
	1: string deviceId;
	2: string actionUri;
	3: string botMid;
	4: ThingsDeviceProductType productType;
	5: string providerName;
	6: string profileImageLocation;
	7: list<string> channelIdList;
}

struct ThRegionalInfo {
	1: string firstName;
	2: string lastName;
	3: string identificationNo;
	4: PaymentRegionalIdentificationType identificationType;
}

struct Tickets {
	1: string ticketId;
	2: i32 displayOrder;
	3: string ownerName;
	4: string ticketClass;
	5: string seatClass;
	6: string seatInfoPrimary;
	7: string seatInfoSecondary;
	8: string fcId;
	9: string priceString;
	10: string ticketDesc;
	11: string qrCodeId;
	12: string qrCodeValue;
	13: string qrCodeType;
	14: string facePhotoUrl;
	15: UIInfo uiInfo;
}

struct TransactionInfo {
	1: string transactionId;
	2: TransactionType transactionType;
	3: i64 transactionDate;
	6: string transactionUserId;
	7: string transactionUserName;
	8: TransactionUserType transactionUserType;
	11: string message;
	12: map<string, string> messageMetadata;
	13: string merchantName;
	14: string productName;
	15: string tradeNumber;
	16: string corporationName;
	17: string accountHolderName;
	18: DisplayMoney moneyAmount;
	19: TransactionDetailType transactionDetailType;
	20: string messageId;
	21: string bankName;
	22: string transactionTypeString;
}

struct TransferRequestInfo {
	1: string requestId;
	2: TransferRequestType requestType;
	3: string requestLineMemberId;
	4: string requestLineUserNickname;
	5: string receiveLineMemberId;
	6: string receiveLineUserNickname;
	9: string sendMessage;
	10: i64 requestDate;
	11: TransferRequestStatus status;
	13: list<TransferRequestReceivedInfo> requestReceivedInfo;
	14: map<string, string> messageMetadata;
	15: DisplayMoney moneyAmount;
	16: i32 totalMemberCount;
	17: i32 startNum;
	18: string messageId;
	19: i32 otherMemberCount;
}

struct TransferRequestReceivedInfo {
	1: string requestId;
	2: TransferRequestType requestType;
	3: string receiveLineMemberId;
	4: string receiveLineUserNickname;
	7: string sendMessage;
	8: i64 requestDate;
	9: TransferRequestStatus status;
	10: DisplayMoney moneyAmount;
}

struct TransactionSetupInfo {
	1: list<string> unitAmounts;
	7: TransactionWithdrawFeeType withdrawFeeType;
	8: string withdrawFeeValue;
	9: CurrencyInfo defaultCurrency;
	10: map<TransactionInputConditions, PaymentInputCondition> inputConditions;
	11: CurrencyInfo pointCurrency;
}

struct UIInfo {
	1: string uiFormat;
	2: i32 schemeVersion;
	3: string bgColor;
	4: string fgColor;
	5: string bgImgUrl;
	6: string fgImgUrl;
	7: string extData;
}

struct UnregisterAvailabilityInfo {
	1: PaymentCanUnregister result;
	2: string message;
}

struct UpdateSquareAuthorityRequest {
	2: set<SquareAuthorityAttribute> updateAttributes;
	3: SquareAuthority authority;
}

struct UpdateSquareAuthorityResponse {
	1: set<SquareAuthorityAttribute> updatdAttributes;
	2: SquareAuthority authority;
}

struct UpdateSquareChatMemberRequest {
	2: set<SquareChatMemberAttribute> updatedAttrs;
	3: SquareChatMember chatMember;
}

struct UpdateSquareChatMemberResponse {
	1: SquareChatMember updatedChatMember;
}

struct UpdateSquareChatRequest {
	2: set<SquareChatAttribute> updatedAttrs;
	3: SquareChat squareChat;
}

struct UpdateSquareChatResponse {
	1: set<SquareChatAttribute> updatedAttrs;
	2: SquareChat squareChat;
}

struct UpdateSquareFeatureSetRequest {
	2: set<SquareFeatureSetAttribute> updateAttributes;
	3: SquareFeatureSet squareFeatureSet;
}

struct UpdateSquareFeatureSetResponse {
	1: set<SquareFeatureSetAttribute> updateAttributes;
	2: SquareFeatureSet squareFeatureSet;
}

struct UpdateSquareMemberRelationRequest {
	2: string squareMid;
	3: string targetSquareMemberMid;
	4: set<SquareMemberRelationAttribute> updatedAttrs;
	5: SquareMemberRelation relation;
}

struct UpdateSquareMemberRelationResponse {
	1: string squareMid;
	2: string targetSquareMemberMid;
	3: set<SquareMemberRelationAttribute> updatedAttrs;
	4: SquareMemberRelation relation;
}

struct UpdateSquareMemberRequest {
	2: set<SquareMemberAttribute> updatedAttrs;
	3: set<SquarePreferenceAttribute> updatedPreferenceAttrs;
	4: SquareMember squareMember;
}

struct UpdateSquareMemberResponse {
	1: set<SquareMemberAttribute> updatedAttrs;
	2: SquareMember squareMember;
	3: set<SquarePreferenceAttribute> updatedPreferenceAttrs;
}

struct UpdateSquareMembersRequest {
	2: set<SquareMemberAttribute> updatedAttrs;
	3: list<SquareMember> members;
}

struct UpdateSquareMembersResponse {
	1: set<SquareMemberAttribute> updatedAttrs;
	2: SquareMember editor;
	3: map<string, SquareMember> members;
}

struct UpdateSquareRequest {
	2: set<SquareAttribute> updatedAttrs;
	3: Square square;
}

struct UpdateSquareResponse {
	1: set<SquareAttribute> updatedAttrs;
	2: Square square;
}

struct UserDevice {
	1: ThingsDevice device;
	2: string deviceDisplayName;
}

struct WalletCategory {
	1: string name,
	2: string key,
}

struct YellowpageItem {
	1: string id;
	2: string mid;
	3: string name;
	4: string address;
	5: double latitude;
	6: double longitude;
	7: double distance;
	8: bool canFreeCall;
	9: i32 countryCode;
	10: string phoneNumber;
	11: i32 categoryId;
	12: i32 categoryIcon;
	13: list<AdditionalInfoItem> additionalInfo;
}

service BotService {
	GetSquareBotResponse getSquareBot(
		1: GetSquareBotRequest req,
	) throws (1: BotException e),
}

service ChatappService {
	GetMyChatappsResponse getChatapp(
		1: GetChatappRequest request,
	) throws (1: ChatappException e),

	GetMyChatappsResponse getMyChatapps(
		1: GetMyChatappsRequest request,
	) throws (1: ChatappException e),
}

service ThingsService {
	ThingsDevice getBleDevice(
		1: GetBleDeviceRequest request,
	) throws (1: ThingsException e),

	list<BleProduct> getBleProducts() throws (1: ThingsException e),
	
	list<UserDevice> getLinkedDevices() throws (1: ThingsException e),
	
	void linkDevice(
		1: DeviceLinkRequest request,
	) throws (1: ThingsException e),
	
	void unlinkDevice(
		1: DeviceUnlinkRequest request,
	) throws (1: ThingsException e),
}

service LiffService {
	LiffViewResponse issueLiffView(
		1: LiffViewRequest request,
	) throws (1: LiffException e),

	void revokeToken(
		1: RevokeTokenRequest request,
	) throws (1: LiffException e),
}

service PaymentService {
	void authPasswordAsync(
		1: string requestToken,
		2: RSAEncryptedPassword password,
		3: string authRequestId,
		4: string sessionToken,
	) throws (1: PaymentException e),

	void authPassword(
		1: RSAEncryptedPassword password,
		2: string authRequestId,
		3: string sessionToken,
	) throws (1: PaymentException e),

	PaymentAuthenticationInfo authenticateUsingBalanceEx(
		1: string balanceAmount,
		2: string authToken,
	) throws (1: PaymentException e),

	PaymentAuthenticationInfo authenticateUsingBankAccountEx(
		1: BankInfoType type,
		2: string bankId,
		3: string bankBranchId,
		4: string realAccountNo,
		5: LinePayAccountInfoAccountProductType accountProductCode,
		6: string authToken,
	) throws (1: PaymentException e),

	void authenticateUsingCitizenIdAsync(
		1: string requestToken,
		2: string citizenId,
		3: string laserNo,
		4: string firstName,
		5: string lastName,
		6: string birthday,
		7: string authToken,
		8: PaymentAuthType type,
	) throws (1: PaymentException e),

	PaymentAuthenticationInfo authenticateUsingNameAndBirthdayEx(
		1: string firstName,
		2: string lastName,
		3: string phoneticFirstName,
		4: string phoneticLastName,
		5: string birthday,
		6: string authToken,
	) throws (1: PaymentException e),

	PaymentAuthenticationInfo authenticateUsingReferenceNoEx(
		1: string referenceNo,
		2: string authToken,
	) throws (1: PaymentException e),

	void bindDevice(
		1: RSAEncryptedPassword password,
		2: string deviceIdentifier,
		3: string publicValueX,
		4: string publicValueY,
	) throws (1: PaymentException e),

	PaymentAmountCalculation calculatePaymentAmount(
		1: string transactionId,
		2: string point,
		3: string binNo,
		4: set<string> couponCodes,
	) throws (1: PaymentException e),

	void cancelPaymentRequest(
		1: string transactionReservedId,
	) throws (1: PaymentException e),

	void cancelTradeRequest(
		1: string chargeRequestId,
	) throws (1: PaymentException e),

	void cancelTransferRequests(
		1: string requestId,
		2: list<string> mids,
	) throws (1: PaymentException e),

	void carryForwardLinePayAccount(
		1: string authToken,
	) throws (1: PaymentException e),

	void changeAgreementStatus(
		1: set<string> agreements,
	) throws (1: PaymentException e),

	void changePasswordAsync(
		1: string requestToken,
		2: RSAEncryptedPassword currentPassword,
		3: RSAEncryptedPassword newPassword,
		4: string authToken,
	) throws (1: PaymentException e),

	void checkAuthType(
		1: PaymentFlowAuthType authType,
		2: TransactionInputConditions featureType,
		3: string accountId,
	) throws (1: PaymentException e),

	PaymentAvailableAuth checkAvailableAuthMethods(
		1: PaymentPasswordType type,
	) throws (1: PaymentException e),

	UnregisterAvailabilityInfo checkCanUnregisterEx(
		1: PaymentCheckUnregisterType type,
	) throws (1: PaymentException e),

	CheckOperationResult checkOperationTimeEx(
		1: PaymentOperationType type,
		2: string lpAccountNo,
		3: PaymentOperationChannelType channelType,
	) throws (1: PaymentException e),

	void confirmPaymentAuth(
		1: string transactionId,
	) throws (1: PaymentException e),

	void createAccountV3(
		1: RSAEncryptedPassword password,
		2: set<string> agreements,
		3: PaymentJoinPath joinPath,
		4: string transactionReserveId,
		5: string deviceIdentifier,
		6: string publicValueX,
		7: string publicValueY,
	) throws (1: PaymentException e),

	CreatedPaymentUserInfoEx createAccountV4(
		1: RSAEncryptedPassword password,
		2: set<string> agreements,
		3: PaymentJoinPath joinPath,
		4: string transactionReserveId,
		5: string deviceIdentifier,
		6: string publicValueX,
		7: string publicValueY,
		8: PaymentRegionalInfo regionalInfo,
	) throws (1: PaymentException e),

	void createDutchTransferRequestAsync(
		1: string requestToken,
		2: string sendMessage,
		3: string currency,
		4: list<PaymentTransferRequest> requests,
		5: map<string, string> messageMetadata,
		6: string targetChatId,
		7: string imageObsPath,
	) throws (1: PaymentException e),

	void createIpassAccount() throws (1: PaymentException e),

	void createTransferRequestAsync(
		1: string requestToken,
		2: string sendMessage,
		3: string currency,
		4: list<PaymentTransferRequest> requests,
		5: map<string, string> messageMetadata,
		6: string targetChatId,
		7: string imageObsPath,
	) throws (1: PaymentException e),

	void depositMoney(
		1: string requestToken,
		2: string accountId,
		3: string amount,
		91: string keyName,
		4: string password,
		5: string otp,
		6: RSAEncryptedLoginInfo loginInfo,
	) throws (1: PaymentException e),

	void enablePointForOneTimeKey(
		1: bool usePoint,
	) throws (1: PaymentException e),

	void executeCompositePaymentAsync(
		1: string requestToken,
		2: string transactionId,
		3: list<CompositePaymentItem> payments,
		91: string keyName,
		4: string password,
		5: string otp,
		6: RSAEncryptedLoginInfo login,
		7: string deviceFingerprint,
		8: set<PayAdditionalAgreementEntry> additionalAgreements,
		9: list<CouponPaymentItem> coupons,
		10: string sessionToken,
	) throws (1: PaymentException e),

	void getAccountBalanceAsync(
		1: string requestToken,
		2: string accountId,
	) throws (1: PaymentException e),

	BalanceInfo getBalance() throws (1: PaymentException e),

	list<BankBranchInfo> getBankBranches(
		1: string financialCorpId,
		2: string query,
		3: i32 startNum,
		4: i32 count,
	) throws (1: PaymentException e),

	PaymentCacheableSettings getCacheableSettings(
		1: PaymentResolutionType resolutionType,
		2: map<PaymentCacheableSettingsTimestamps, i64> timestamps,
	) throws (1: PaymentException e),

	list<CardBrandInfo> getCardBrands() throws (1: PaymentException e),

	PaymentCountrySettingInfoEx getCountrySettingV4(
		1: string processor,
		2: string manufacturer,
		3: string model,
	) throws (1: PaymentException e),

	PaymentMethodOneTimeKey getCurrentPaymentMethodUsingOneTimeKey() throws (1: PaymentException e),

	PaymentFlowTypeInfo getFlowType(
		1: TransactionInputConditions featureType,
		2: string accountId,
		3: bool onlyPointPayment,
	) throws (1: PaymentException e),

	PaymentLineCardIssueForm getLineCardIssueForm(
		1: PaymentResolutionType resolutionType,
	) throws (1: PaymentException e),

	LinePayAccountInfo getLinePayAccount(
		1: string accountId,
	) throws (1: PaymentException e),

	PayGetMyCouponResponse getMyCoupons(
		1: PaymentClientPage clientPage,
		2: CouponPaymentItemReward reward,
		3: string transactionReserveId,
	) throws (1: PaymentException e),

	PaymentDetailInfo getPaymentDetail(
		1: string transactionId,
	) throws (1: PaymentException e),

	PaymentRequestAuthInfo getPaymentRequestAuthV2(
		1: string transactionId,
	) throws (1: PaymentException e),

	PaymentRequestInfo getPaymentRequestV2(
		1: string transactionReserveId,
		2: string sourceApplication,
	) throws (1: PaymentException e),

	string getPaymentUrlByKey(
		1: string key,
	) throws (1: PaymentException e),

	PaymentPointInfo getPoint() throws (1: PaymentException e),

	PaymentRequiredAgreementsInfo getRequiredAgreements() throws (1: PaymentException e),

	PaymentSettingsMenuInfo getSettingsMenuInfo() throws (1: PaymentException e),

	PayStatusInfo getStatusInfo(
		1: string targetStatusFetchId,
	) throws (1: PaymentException e),

	PaymentStoredCreditCardInfo getStoredCreditCardInfoForOneTimePayment() throws (1: PaymentException e),

	TransactionInfo getTransactionInfo(
		1: string transactionId,
	) throws (1: PaymentException e),

	TransactionSetupInfo getTransactionSetupInfo() throws (1: PaymentException e),

	TransferRequestInfo getTransferRequestInfo(
		1: string requestId,
		2: i32 startNum,
		3: i32 count,
	) throws (1: PaymentException e),

	PaymentTransferTargetInfo getTransferTargetInfo(
		1: string toMid,
		2: PaymentSearchType searchType,
	) throws (1: PaymentException e),

	PaymentUserInfoDigest getUserInfoDigest() throws (1: PaymentException e),

	PaymentUserInfoEx getUserInfoEx(
		1: string accessType,
	) throws (1: PaymentException e),

	void inviteFriends(
		1: list<string> friendMids,
		2: string message,
		3: map<string, string> messageMetadata,
		4: string imageObsPath,
	) throws (1: PaymentException e),

	string issueCreditCardToken(
		1: string accountId,
	) throws (1: PaymentException e),

	string issueFinanceRequestToken() throws (1: PaymentException e),

	void issueLineCard(
		1: string requestToken,
		2: string designCode,
		3: string firstName,
		4: string lastName,
		5: string postalCode,
		6: string state,
		7: string address1,
		8: string address2,
		9: set<string> agreedTermsOfServices,
	) throws (1: PaymentException e),

	string issueNonce() throws (1: PaymentException e),

	OneTimeKey issueOneTimeKey(
		1: string accessType,
		2: string deviceHash,
		3: set<string> couponCodes,
		4: PaymentOneTimeKeyType oneTimeKeyType,
		5: string sessionToken,
	) throws (1: PaymentException e),

	void issueOtpAsync(
		1: string requestToken,
		2: TransactionInputConditions featureType,
		3: string accountId,
		4: string toMid,
		5: string amount,
		6: bool isManual,
	) throws (1: PaymentException e),

	PaymentRSA issueRSAKey() throws (1: PaymentException e),

	string issueRequestToken() throws (1: PaymentException e),

	string issueTTSPinCodeV2(
		1: string authToken,
	) throws (1: PaymentException e),

	string issueTrackingTicket() throws (1: PaymentException e),

	list<CompositePaymentItemMethod> listAvailablePaymentMethodsUsingOneTimeKey() throws (1: PaymentException e),

	list<BankInfo> listBanks(
		1: BankInfoType type,
	) throws (1: PaymentException e),

	PayInvitationInfo listInvitationInfo(
		1: string invitationBundleId,
	) throws (1: PaymentException e),

	list<LinePayAccountInfo> listLinePayBankAccounts(
		1: BankInfoType type,
		2: string transactionReserveId,
	) throws (1: PaymentException e),

	list<LinePayAccountInfo> listLinePayCardAccounts(
		1: string primary,
		2: PaymentListLinePayCardAccounts type,
	) throws (1: PaymentException e),

	list<PaymentTradeInfo> listTradeNumbers(
		1: PaymentListTradeNumbersType type,
		2: i64 startDate,
		3: i64 endDate,
		4: i32 startNum,
		5: i32 count,
		6: PaymentListTradeNumbersStatus status,
	) throws (1: PaymentException e),

	list<PaymentTransactionHistoryInfo> listTransactionHistory(
		1: i32 startNum,
		2: i32 count,
	) throws (1: PaymentException e),

	list<TransactionInfo> listTransactions(
		1: string type,
		2: i64 startDate,
		3: i64 endDate,
		4: i32 startNum,
		5: i32 count,
	) throws (1: PaymentException e),

	list<TransferRequestInfo> listTransferRequests(
		1: string type,
		2: i64 startDate,
		3: i64 endDate,
		4: i32 startNum,
		5: i32 count,
	) throws (1: PaymentException e),

	void postPopupButtonEvents(
		1: string buttonId,
		2: map<string, string> checkboxes,
	) throws (1: PaymentException e),

	PaymentGetResponse queryMultiOperations(
		1: i32 operationsBitmask,
	) throws (1: PaymentException e),

	PayRefreshOneTimeKeyResponse refreshOneTimeKey(
		1: string oneTimeKey,
		2: set<string> couponCodes,
	) throws (1: PaymentException e),

	void registerBarcodeAsync(
		1: string requestToken,
		2: string barcodeRequestId,
		3: string barcode,
		4: RSAEncryptedPassword password,
	) throws (1: PaymentException e),

	void removeLinePayAccount(
		1: string accountId,
	) throws (1: PaymentException e),

	void removeUser(
		1: bool balanceDisclaimerAgreement,
		2: RSAEncryptedPassword password,
	) throws (1: PaymentException e),

	void requestIdentification(
		1: string frontPhotoOBSHash,
		2: string backPhotoOBSHash,
		3: string trackingId,
	) throws (1: PaymentException e),

	PaymentTradeInfo requestTradeNumber(
		1: string requestToken,
		2: PaymentListTradeNumbersType requestType,
		3: string amount,
		4: string name,
	) throws (1: PaymentException e),

	void resumeSuspendedUser(
		1: RSAEncryptedPassword password,
		2: string sessionToken,
	) throws (1: PaymentException e),

	list<PaymentAddressSearchResult> searchAddress(
		1: PaymentCountrySettingAddressSearchType type,
		2: string query,
	) throws (1: PaymentException e),

	void setMinimumBalanceNotification(
		1: bool enable,
		2: string minBalance,
	) throws (1: PaymentException e),

	void setPaymentMethodUsingOneTimeKey(
		1: CompositePaymentItemMethod paymethod,
		2: string lpAccountNo,
	) throws (1: PaymentException e),

	string transferMoneyV2(
		1: string requestToken,
		2: string toMid,
		3: string amount,
		4: string currency,
		5: string requestId,
		6: PaymentMessageCommand message,
		91: string keyName,
		7: string password,
		8: string otp,
		9: RSAEncryptedLoginInfo loginInfo,
	) throws (1: PaymentException e),

	void updateCardAccountAsync(
		1: string requestToken,
		2: string accountId,
		3: string firstName,
		4: string lastName,
		5: string nickname,
		6: bool setPrimary,
	) throws (1: PaymentException e),

	void updateLinePayAccount(
		1: string accountId,
		2: string accountNickname,
		3: bool isPrimary,
	) throws (1: PaymentException e),

	void updatePasswordLock(
		1: bool entry,
	) throws (1: PaymentException e),

	void updateUserGeneralSettings(
		1: map<PaymenInvoiceSettings, string> settings,
	) throws (1: PaymentException e),

	void updateUserStatus(
		2: string email,
		7: string firstName,
		8: string lastName,
		9: string phoneticFirstName,
		10: string phoneticLastName,
		5: string phone,
		11: string postalCode,
		12: string state,
		13: string address1,
		14: string address2,
		15: RSAEncryptedPassword password,
	) throws (1: PaymentException e),

	list<PaymentEligibleFriendStatus> validateEligibleFriends(
		1: list<string> friends,
		2: PaymentValidateEligibleFriendsType type,
	) throws (1: PaymentException e),

	void validateIdPasswordAsync(
		1: string requestToken,
		91: string keyName,
		2: RSAEncryptedLoginInfo loginInfo,
		3: string accountId,
	) throws (1: PaymentException e),

	void validatePayg(
		1: string paygBody,
	) throws (1: PaymentException e),

	void verifyPasswordStrengthAsync(
		1: string requestToken,
		2: RSAEncryptedPassword password,
	) throws (1: PaymentException e),

	PaymentTTSPinCodeVerificationInfo verifyTTSPinCode(
		1: string issueSeq,
		2: string pinCode,
		3: string authToken,
	) throws (1: PaymentException e),

	void withdrawMoney(
		1: string requestToken,
		2: string toAccountId,
		3: string amount,
		91: string keyName,
		4: string password,
		5: string otp,
		6: RSAEncryptedLoginInfo loginInfo,
	) throws (1: PaymentException e),
}

service SearchService {
	AutocompleteResult getAutocomplete(
		1: AutocompleteRequest request,
	) throws (1: SearchException e),

	map<i32, list<Notice>> getNotice(
		1: set<i32> noticeTypes,
		2: string region,
	) throws (1: SearchException e),

	map<i32, SearchSection> getSearchSection(
		1: set<i32> searchSectionTypes,
		2: string region,
	) throws (1: SearchException e),

	SearchResult searchAll(
		1: string query,
		2: SearchCommonParameter param,
		3: i32 currentCollection,
	) throws (1: SearchException e),

	SearchResult searchCollection(
		1: string query,
		2: SearchPagingParameter param,
	) throws (1: SearchException e),
}

service ShopService {
	void buyMustbuyProduct(
		2: BuyMustbuyRequest requests,
	) throws (1: ShopException e),

	void canReceivePresent(
		2: string shopId,
		3: string productId,
		4: Locale locale,
		5: string recipientMid,
	) throws (1: ShopException e),
	
	AutoSuggestionShowcaseResponse getAutoSuggestionShowcase(
		2: AutoSuggestionShowcaseRequest autoSuggestionShowcaseRequest,
	) throws (1: ShopException e),
	
	GetOldSticonMappingResponse getOldSticonMapping(
		2: GetOldSticonMappingRequest req,
	) throws (1: ShopException e),
	
	ProductSummaryList getOwnedProductSummaries(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	DetailedProductList getOwnedProducts(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	ProductDetail getProductByVersion(
		2: string shopId,
		3: string productId,
		4: i64 productVersion,
		5: Locale locale,
	) throws (1: ShopException e),
	
	GetProductResponse getProductV2(
		2: GetProductRequest request,
	) throws (1: ShopException e),
	
	ProductValidationScheme getProductValidationScheme(
		2: string shopId,
		3: string productId,
		4: i64 productVersion,
	) throws (1: ShopException e),
	
	ProductDetail getProduct(
		2: string shopId,
		3: string productId,
		4: Locale locale,
	) throws (1: ShopException e),
	
	ProductList getProductsByAuthor(
		2: ProductListByAuthorRequest productListByAuthorRequest,
	) throws (1: ShopException e),
	
	PurchaseRecordList getPurchasedProducts(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	PurchaseRecordList getReceivedPresents(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	GetRecommendOaResponse getRecommendOa(
		2: GetRecommendOaRequest req,
	) throws (1: ShopException e),
	
	ProductList getRecommendationForUser(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	GetRecommendationResponse getRecommendationList(
		2: GetRecommendationRequest getRecommendationRequest,
	) throws (1: ShopException e),
	
	PurchaseRecordList getSentPresents(
		2: string shopId,
		3: i32 offset,
		4: i32 limit,
		5: Locale locale,
	) throws (1: ShopException e),
	
	ShowcaseV3 getShowcaseV3(
		1: ShowcaseRequest showcaseRequest,
	) throws (1: ShopException e),
	
	GetSuggestDictionarySettingResponse getSuggestDictionarySetting(
		2: GetSuggestDictionarySettingRequest req,
	) throws (1: ShopException e),
	
	GetSuggestResourcesV2Response getSuggestResourcesV2(
		2: GetSuggestResourcesV2Request req,
	) throws (1: ShopException e),
	
	ShopUpdates getUpdates(
		2: string shopId,
		3: Locale locale,
	) throws (1: ShopException e),
	
	void notifyProductEvent(
		2: string shopId,
		3: string productId,
		4: i64 productVersion,
		5: i64 productEvent,
	) throws (1: ShopException e),
	
	PurchaseOrderResponse placePurchaseOrderForFreeProduct(
		2: PurchaseOrder purchaseOrder,
	) throws (1: ShopException e),
	
	PurchaseOrderResponse placePurchaseOrderWithLineCoin(
		2: PurchaseOrder purchaseOrder,
	) throws (1: ShopException e),
	
	ProductValidationResult validateProduct(
		2: string shopId,
		3: string productId,
		4: i64 productVersion,
		5: ProductValidationRequest validationReq,
	) throws (1: ShopException e),
}

service SquareService {
	ApproveSquareMembersResponse approveSquareMembers(
		1: ApproveSquareMembersRequest request,
	) throws (1: SquareException e),

	CreateSquareResponse createSquare(
		1: CreateSquareRequest request,
	) throws (1: SquareException e),

	CreateSquareChatAnnouncementResponse createSquareChatAnnouncement(
		1: CreateSquareChatAnnouncementRequest createSquareChatAnnouncementRequest,
	) throws (1: SquareException e),

	CreateSquareChatResponse createSquareChat(
		1: CreateSquareChatRequest request,
	) throws (1: SquareException e),

	DeleteSquareResponse deleteSquare(
		1: DeleteSquareRequest request,
	) throws (1: SquareException e),

	DeleteSquareChatResponse deleteSquareChat(
		1: DeleteSquareChatRequest request,
	) throws (1: SquareException e),

	DeleteSquareChatAnnouncementResponse deleteSquareChatAnnouncement(
		1: DeleteSquareChatAnnouncementRequest deleteSquareChatAnnouncementRequest,
	) throws (1: SquareException e),

	DestroyMessageResponse destroyMessage(
		1: DestroyMessageRequest request,
	) throws (1: SquareException e),

	DestroyMessagesResponse destroyMessages(
		1: DestroyMessagesRequest request,
	) throws (1: SquareException e),

	FetchMyEventsResponse fetchMyEvents(
		1: FetchMyEventsRequest request,
	) throws (1: SquareException e),

	FetchSquareChatEventsResponse fetchSquareChatEvents(
		1: FetchSquareChatEventsRequest request,
	) throws (1: SquareException e),

	FindSquareByEmidResponse findSquareByEmid(
		1: FindSquareByEmidRequest findSquareByEmidRequest,
	) throws (1: SquareException e),

	FindSquareByInvitationTicketResponse findSquareByInvitationTicket(
		1: FindSquareByInvitationTicketRequest request,
	) throws (1: SquareException e),

	GetSquareCategoriesResponse getCategories(
		1: GetSquareCategoriesRequest request,
	) throws (1: SquareException e),

	GetInvitationTicketUrlResponse getInvitationTicketUrl(
		1: GetInvitationTicketUrlRequest request,
	) throws (1: SquareException e),

	GetJoinableSquareChatsResponse getJoinableSquareChats(
		1: GetJoinableSquareChatsRequest request,
	) throws (1: SquareException e),

	GetJoinedSquareChatsResponse getJoinedSquareChats(
		1: GetJoinedSquareChatsRequest request,
	) throws (1: SquareException e),

	GetJoinedSquaresResponse getJoinedSquares(
		1: GetJoinedSquaresRequest request,
	) throws (1: SquareException e),

	GetNoteStatusResponse getNoteStatus(
		1: GetNoteStatusRequest request,
	) throws (1: SquareException e),

	GetSquareAuthoritiesResponse getSquareAuthorities(
		1: GetSquareAuthoritiesRequest request,
	) throws (1: SquareException e),

	GetSquareAuthorityResponse getSquareAuthority(
		1: GetSquareAuthorityRequest request,
	) throws (1: SquareException e),

	GetSquareChatAnnouncementsResponse getSquareChatAnnouncements(
		1: GetSquareChatAnnouncementsRequest getSquareChatAnnouncementsRequest,
	) throws (1: SquareException e),

	GetSquareChatMemberResponse getSquareChatMember(
		1: GetSquareChatMemberRequest request,
	) throws (1: SquareException e),

	GetSquareChatMembersResponse getSquareChatMembers(
		1: GetSquareChatMembersRequest request,
	) throws (1: SquareException e),

	GetSquareChatStatusResponse getSquareChatStatus(
		1: GetSquareChatStatusRequest request,
	) throws (1: SquareException e),

	GetSquareChatResponse getSquareChat(
		1: GetSquareChatRequest request,
	) throws (1: SquareException e),

	GetSquareFeatureSetResponse getSquareFeatureSet(
		1: GetSquareFeatureSetRequest request,
	) throws (1: SquareException e),

	GetSquareMemberRelationResponse getSquareMemberRelation(
		1: GetSquareMemberRelationRequest request,
	) throws (1: SquareException e),

	GetSquareMemberRelationsResponse getSquareMemberRelations(
		1: GetSquareMemberRelationsRequest request,
	) throws (1: SquareException e),

	GetSquareMemberResponse getSquareMember(
		1: GetSquareMemberRequest request,
	) throws (1: SquareException e),

	GetSquareMembersResponse getSquareMembers(
		1: GetSquareMembersRequest request,
	) throws (1: SquareException e),

	GetSquareStatusResponse getSquareStatus(
		1: GetSquareStatusRequest request,
	) throws (1: SquareException e),

	GetSquareResponse getSquare(
		1: GetSquareRequest request,
	) throws (1: SquareException e),

	InviteIntoSquareChatResponse inviteIntoSquareChat(
		1: InviteIntoSquareChatRequest request,
	) throws (1: SquareException e),

	InviteToSquareResponse inviteToSquare(
		1: InviteToSquareRequest request,
	) throws (1: SquareException e),

	JoinSquareChatResponse joinSquareChat(
		1: JoinSquareChatRequest request,
	) throws (1: SquareException e),

	JoinSquareResponse joinSquare(
		1: JoinSquareRequest request,
	) throws (1: SquareException e),

	LeaveSquareChatResponse leaveSquareChat(
		1: LeaveSquareChatRequest request,
	) throws (1: SquareException e),

	LeaveSquareResponse leaveSquare(
		1: LeaveSquareRequest request,
	) throws (1: SquareException e),

	MarkAsReadResponse markAsRead(
		1: MarkAsReadRequest request,
	) throws (1: SquareException e),

	RefreshSubscriptionsResponse refreshSubscriptions(
		1: RefreshSubscriptionsRequest request,
	) throws (1: SquareException e),

	RejectSquareMembersResponse rejectSquareMembers(
		1: RejectSquareMembersRequest request,
	) throws (1: SquareException e),

	RemoveSubscriptionsResponse removeSubscriptions(
		1: RemoveSubscriptionsRequest request,
	) throws (1: SquareException e),

	ReportSquareChatResponse reportSquareChat(
		1: ReportSquareChatRequest request,
	) throws (1: SquareException e),

	ReportSquareMemberResponse reportSquareMember(
		1: ReportSquareMemberRequest request,
	) throws (1: SquareException e),

	ReportSquareMessageResponse reportSquareMessage(
		1: ReportSquareMessageRequest request,
	) throws (1: SquareException e),

	ReportSquareResponse reportSquare(
		1: ReportSquareRequest request,
	) throws (1: SquareException e),

	SearchSquareChatMembersResponse searchSquareChatMembers(
		1: SearchSquareChatMembersRequest request,
	) throws (1: SquareException e),

	SearchSquareMembersResponse searchSquareMembers(
		1: SearchSquareMembersRequest request,
	) throws (1: SquareException e),

	SearchSquaresResponse searchSquares(
		1: SearchSquaresRequest request,
	) throws (1: SquareException e),

	SendMessageResponse sendMessage(
		1: SendMessageRequest request,
	) throws (1: SquareException e),

	UpdateSquareAuthorityResponse updateSquareAuthority(
		1: UpdateSquareAuthorityRequest request,
	) throws (1: SquareException e),

	UpdateSquareChatMemberResponse updateSquareChatMember(
		1: UpdateSquareChatMemberRequest request,
	) throws (1: SquareException e),

	UpdateSquareChatResponse updateSquareChat(
		1: UpdateSquareChatRequest request,
	) throws (1: SquareException e),

	UpdateSquareFeatureSetResponse updateSquareFeatureSet(
		1: UpdateSquareFeatureSetRequest request,
	) throws (1: SquareException e),

	UpdateSquareMemberRelationResponse updateSquareMemberRelation(
		1: UpdateSquareMemberRelationRequest request,
	) throws (1: SquareException e),

	UpdateSquareMemberResponse updateSquareMember(
		1: UpdateSquareMemberRequest request,
	) throws (1: SquareException e),

	UpdateSquareMembersResponse updateSquareMembers(
		1: UpdateSquareMembersRequest request,
	) throws (1: SquareException e),

	UpdateSquareResponse updateSquare(
		1: UpdateSquareRequest request,
	) throws (1: SquareException e),
}

service TicketService {
	GetReservationResponse getReservation(
		1: GetReservationRequest request,
	) throws (1: TicketException e),

	GetReservationsResponse getReservations(
		1: GetReservationsRequest request,
	) throws (1: TicketException e),

	NotifyEnteringResponse notifyEntering(
		1: NotifyEnteringRequest request,
	) throws (1: TicketException e),

	ReturnTicketResponse returnTicket(
		1: ReturnTicketRequest request,
	) throws (1: TicketException e),
}

service WalletService {
	GetBalanceSummaryResponse getBalanceSummary(
		1: GetBalanceSummaryRequest request,
	) throws (1: WalletException e),

	GetPromotionsResponse getPromotions(
		1: GetPromotionsRequest request,
	) throws (1: WalletException e),
}